classdef ChannelsController < ws.Controller
    properties  % protected by gentleman's agreement
        DeviceNamePopupLabelText
        DeviceNamePopup
        
        ReferenceClockPanel
        ReferenceClockSourcePopupLabelText
        ReferenceClockSourcePopup
        ReferenceClockRateEditLabelText
        ReferenceClockRateEdit
        ReferenceClockRateEditUnitsText
        
        AIsPanel
        AIChannelNameColTitleText
        AIDeviceNameColTitleText
        AITerminalNameColTitleText
        AIUnitsColTitleText
        AIScaleColTitleText
        AIIsActiveColTitleText        
        AIIsMarkedForDeletionColTitleText        
        AIChannelNameEdits
        AIDeviceNamePopups
        AITerminalNamePopups        
        AIUnitsEdits
        AIScaleEdits
        AIScaleUnitsTexts
        AIIsActiveCheckboxes
        AIIsMarkedForDeletionCheckboxes
        AddAIChannelButton
        DeleteAIChannelsButton
        
        AOsPanel
        AOChannelNameColTitleText
        AODeviceNameColTitleText
        AOTerminalNameColTitleText
        AOUnitsColTitleText
        AOScaleColTitleText
        AOIsActiveColTitleText        
        AOIsMarkedForDeletionColTitleText        
        AOChannelNameEdits
        AODeviceNamePopups
        AOTerminalNamePopups        
        AOUnitsEdits
        AOScaleEdits
        AOScaleUnitsTexts
        AOIsMarkedForDeletionCheckboxes
        AddAOChannelButton
        DeleteAOChannelsButton

        DIsPanel
        DIChannelNameColTitleText
        DIDeviceNameColTitleText
        DITerminalNameColTitleText
        DIIsActiveColTitleText        
        DIIsMarkedForDeletionColTitleText        
        DIChannelNameEdits
        DIDeviceNamePopups
        DITerminalNamePopups        
        DIIsActiveCheckboxes
        DIIsMarkedForDeletionCheckboxes
        AddDIChannelButton
        DeleteDIChannelsButton
        
        DOsPanel
        DOChannelNameColTitleText
        DODeviceNameColTitleText
        DOTerminalNameColTitleText
        DOIsTimedColTitleText        
        DOIsOnColTitleText        
        DOIsMarkedForDeletionColTitleText        
        DOChannelNameEdits
        DODeviceNamePopups
        DOTerminalNamePopups        
        DOIsTimedCheckboxes
        DOIsOnRadiobuttons            
        DOIsMarkedForDeletionCheckboxes
        AddDOChannelButton
        DeleteDOChannelsButton
    end  % properties
    
    methods
        function self = ChannelsController(wsModel)
            self = self@ws.Controller(wsModel) ;                        
            %self = self@ws.MCOSFigure(model,controller);
            
            % Set the relevant properties of the figure itself
            set(self.FigureGH_,'Tag','ChannelsController', ...
                              'Units','pixels', ...
                              'Resize','off', ...
                              'Name','Devices & Channels', ...
                              'NumberTitle','off', ...
                              'Menubar','none', ...
                              'Visible','off');
            
            % Create all the "static" controls, set them up, but don't position them
            self.createFixedControls_();

            % Set up the tags of the HG objects to match the property names
            %self.updateHGObjectTags_();
           
            % Initialize the guidata
            %self.updateGuidata_();

            % sync up self to model
            self.update();         
            
            % Subscribe to model events
            %wsModel=self.Model;  % this is the root model
            if ~isempty(wsModel) ,
                wsModel.subscribeMe(self, 'Update', '', 'update');                
                wsModel.subscribeMe(self, 'UpdateChannels', '', 'update');                
                wsModel.subscribeMe(self, 'DidSetState', '', 'updateControlProperties');
                wsModel.subscribeMe(self, 'UpdateDigitalOutputStateIfUntimed', '', 'updateControlProperties');
                wsModel.subscribeMe(self, 'DidSetSingleFigureVisibility', '', 'updateVisibility') ;
            end
            
            % make the figure visible
            %set(self.FigureGH_,'Visible','on');                        
        end
    end  % public methods block
        
    methods (Access=protected)
        function createFixedControls_(self)
            % Create the device name popup and label
            self.DeviceNamePopupLabelText = ...
                ws.uicontrol('Parent',self.FigureGH_, ...
                             'Style','text', ...
                             'HorizontalAlignment','right', ...
                             'String','Primary Device:');
            self.DeviceNamePopup = ...
                ws.uicontrol('Parent',self.FigureGH_, ...
                             'Style','popup', ...
                             'BackgroundColor','w', ...
                             'HorizontalAlignment','left', ...
                             'Callback',@(source,event)(self.controlActuated('DeviceNamePopup',source,event)) );

                      
            % Create the panels and the fixed controls in them
            self.createReferenceClockPanelFixedControls_() ;
            self.createAIPanelFixedControls_() ;
            self.createAOPanelFixedControls_() ;
            self.createDIPanelFixedControls_() ;
            self.createDOPanelFixedControls_() ;
        end  % method

        function createReferenceClockPanelFixedControls_(self)
            % Make the panel itself
            self.ReferenceClockPanel= ...
                ws.uipanel('Parent',self.FigureGH_, ...
                           'Tag','ReferenceClockPanel', ...
                           'Title','Reference Clock') ;
            
            % Create the timebase source popup and label
            self.ReferenceClockSourcePopupLabelText = ...
                ws.uicontrol('Parent',self.ReferenceClockPanel, ...
                             'Style','text', ...
                             'HorizontalAlignment','right', ...
                             'String','Source:');
            self.ReferenceClockSourcePopup = ...
                ws.uicontrol('Parent',self.ReferenceClockPanel, ...
                             'Style','popup', ...
                             'BackgroundColor','w', ...
                             'HorizontalAlignment','left', ...
                             'Enable', 'off', ...
                             'Callback',@(source,event)(self.controlActuated('ReferenceClockSourcePopup',source,event)) );
            
            % Create the timebase source popup and label
            self.ReferenceClockRateEditLabelText = ...
                ws.uicontrol('Parent',self.ReferenceClockPanel, ...
                             'Style','text', ...
                             'HorizontalAlignment','right', ...
                             'String','Rate:') ;
            self.ReferenceClockRateEdit = ...
                ws.uicontrol('Parent',self.ReferenceClockPanel, ...
                             'Style','edit', ...
                             'BackgroundColor','w', ...
                             'HorizontalAlignment','right', ...
                             'Enable', 'off', ...
                             'Callback',@(source,event)(self.controlActuated('ReferenceClockRateEdit',source,event)) ) ;
            self.ReferenceClockRateEditUnitsText = ...
                ws.uicontrol('Parent',self.ReferenceClockPanel, ...
                             'Style','text', ...
                             'HorizontalAlignment','left', ...
                             'String','MHz') ;
        end        
        
        function createAIPanelFixedControls_(self)
            % Make the panel itself
            self.AIsPanel= ...
                ws.uipanel('Parent',self.FigureGH_, ...
                           'Tag','AIsPanel', ...
                           'Title','AI Channels');
            
            % make the title row
            self.AIChannelNameColTitleText = ...
                ws.uicontrol('Parent',self.AIsPanel, ...
                             'Style','text', ...
                             'HorizontalAlignment','center', ...
                             'String','Name');
            self.AIDeviceNameColTitleText = ...
                ws.uicontrol('Parent',self.AIsPanel, ...
                             'Style','text', ...
                             'HorizontalAlignment','center', ...
                             'String','Device');
            self.AITerminalNameColTitleText = ...
                ws.uicontrol('Parent',self.AIsPanel, ...
                             'Style','text', ...
                             'HorizontalAlignment','center', ...
                             'String','Terminal');
            self.AIUnitsColTitleText= ...
                ws.uicontrol('Parent',self.AIsPanel, ...
                             'Style','text', ...                          
                             'HorizontalAlignment','center', ...
                             'String','Units');
            self.AIScaleColTitleText= ...
                ws.uicontrol('Parent',self.AIsPanel, ...
                             'Style','text', ...
                             'HorizontalAlignment','center', ...
                             'String','Scale');
            self.AIIsActiveColTitleText= ...
                ws.uicontrol('Parent',self.AIsPanel, ...
                             'Style','text', ...
                             'HorizontalAlignment','center', ...
                             'String','Active?');
            self.AIIsMarkedForDeletionColTitleText= ...
                ws.uicontrol('Parent',self.AIsPanel, ...
                             'Style','text', ...
                             'HorizontalAlignment','center', ...
                             'String','Delete?');
                    
            % make the buttons
            self.AddAIChannelButton= ...
                ws.uicontrol('Parent',self.AIsPanel, ...
                             'Style','pushbutton', ...
                             'String','Add', ...
                             'Callback',@(source,event)(self.controlActuated('AddAIChannelButton',source,event)) );
            self.DeleteAIChannelsButton= ...
                ws.uicontrol('Parent',self.AIsPanel, ...
                             'Style','pushbutton', ...
                             'String','Delete', ...
                             'Callback',@(source,event)(self.controlActuated('DeleteAIChannelsButton',source,event)) );
        end  % method
        
        function createAOPanelFixedControls_(self)
            % Make the panel itself
            self.AOsPanel= ...
                ws.uipanel('Parent',self.FigureGH_, ...
                        'Tag','AOsPanel', ...
                        'Title','AO Channels');
            
            % make the title row
            self.AOChannelNameColTitleText = ...
                ws.uicontrol('Parent',self.AOsPanel, ...
                          'Style','text', ...
                          'HorizontalAlignment','center', ...
                          'String','Name');
            self.AODeviceNameColTitleText = ...
                ws.uicontrol('Parent',self.AOsPanel, ...
                             'Style','text', ...
                             'HorizontalAlignment','center', ...
                             'String','Device');
            self.AOTerminalNameColTitleText = ...
                ws.uicontrol('Parent',self.AOsPanel, ...
                          'Style','text', ...
                          'HorizontalAlignment','center', ...
                          'String','Terminal');
            self.AOUnitsColTitleText= ...
                ws.uicontrol('Parent',self.AOsPanel, ...
                          'Style','text', ...
                          'HorizontalAlignment','center', ...
                          'String','Units');
            self.AOScaleColTitleText= ...
                ws.uicontrol('Parent',self.AOsPanel, ...
                          'Style','text', ...
                          'HorizontalAlignment','center', ...
                          'String','Scale');
            self.AOIsMarkedForDeletionColTitleText= ...
                ws.uicontrol('Parent',self.AOsPanel, ...
                          'Style','text', ...
                          'HorizontalAlignment','center', ...
                          'String','Delete?');
                    
            % make the buttons
            self.AddAOChannelButton= ...
                ws.uicontrol('Parent',self.AOsPanel, ...
                          'Style','pushbutton', ...
                          'String','Add', ...
                          'Callback',@(source,event)(self.controlActuated('AddAOChannelButton',source,event)) );
            self.DeleteAOChannelsButton= ...
                ws.uicontrol('Parent',self.AOsPanel, ...
                          'Style','pushbutton', ...
                          'String','Delete', ...
                          'Callback',@(source,event)(self.controlActuated('DeleteAOChannelsButton',source,event)) );
        end  % method
        
        function createDIPanelFixedControls_(self)
            % Make the panel itself
            self.DIsPanel= ...
                ws.uipanel('Parent',self.FigureGH_, ...
                        'Tag','DIsPanel', ...
                        'Title','DI Channels');
            
            % make the title row
            self.DIChannelNameColTitleText = ...
                ws.uicontrol('Parent',self.DIsPanel, ...
                          'Style','text', ...
                          'HorizontalAlignment','center', ...
                          'String','Name');
            self.DIDeviceNameColTitleText = ...
                ws.uicontrol('Parent',self.DIsPanel, ...
                             'Style','text', ...
                             'HorizontalAlignment','center', ...
                             'String','Device');
            self.DITerminalNameColTitleText = ...
                ws.uicontrol('Parent',self.DIsPanel, ...
                          'Style','text', ...
                          'HorizontalAlignment','center', ...
                          'String','Terminal');
            self.DIIsActiveColTitleText= ...
                ws.uicontrol('Parent',self.DIsPanel, ...
                          'Style','text', ...
                          'HorizontalAlignment','center', ...
                          'String','Active?');
            self.DIIsMarkedForDeletionColTitleText= ...
                ws.uicontrol('Parent',self.DIsPanel, ...
                          'Style','text', ...
                          'HorizontalAlignment','center', ...
                          'String','Delete?');
                    
            % make the buttons
            self.AddDIChannelButton= ...
                ws.uicontrol('Parent',self.DIsPanel, ...
                          'Style','pushbutton', ...
                          'String','Add', ...
                          'Callback',@(source,event)(self.controlActuated('AddDIChannelButton',source,event)) );
            self.DeleteDIChannelsButton= ...
                ws.uicontrol('Parent',self.DIsPanel, ...
                          'Style','pushbutton', ...
                          'String','Delete', ...
                          'Callback',@(source,event)(self.controlActuated('DeleteDIChannelsButton',source,event)) );
        end  % method
        
        function createDOPanelFixedControls_(self)
            % Make the panel itself
            self.DOsPanel= ...
                ws.uipanel('Parent',self.FigureGH_, ...
                        'Tag','DOsPanel', ...
                        'Title','DO Channels');
            
            % make the title row
            self.DOChannelNameColTitleText = ...
                ws.uicontrol('Parent',self.DOsPanel, ...
                          'Style','text', ...
                          'HorizontalAlignment','center', ...
                          'String','Name');
            self.DODeviceNameColTitleText = ...
                ws.uicontrol('Parent',self.DOsPanel, ...
                             'Style','text', ...
                             'HorizontalAlignment','center', ...
                             'String','Device');
            self.DOTerminalNameColTitleText = ...
                ws.uicontrol('Parent',self.DOsPanel, ...
                          'Style','text', ...
                          'HorizontalAlignment','center', ...
                          'String','Terminal');
            self.DOIsTimedColTitleText= ...
                ws.uicontrol('Parent',self.DOsPanel, ...
                          'Style','text', ...
                          'HorizontalAlignment','center', ...
                          'String','Timed?');
            self.DOIsOnColTitleText= ...
                ws.uicontrol('Parent',self.DOsPanel, ...
                          'Style','text', ...
                          'HorizontalAlignment','center', ...
                          'String','On?');
            self.DOIsMarkedForDeletionColTitleText= ...
                ws.uicontrol('Parent',self.DOsPanel, ...
                          'Style','text', ...
                          'HorizontalAlignment','center', ...
                          'String','Delete?');
                    
            % make the buttons
            self.AddDOChannelButton= ...
                ws.uicontrol('Parent',self.DOsPanel, ...
                          'Style','pushbutton', ...
                          'String','Add', ...
                          'Callback',@(source,event)(self.controlActuated('AddDOChannelButton',source,event)) );
            self.DeleteDOChannelsButton= ...
                ws.uicontrol('Parent',self.DOsPanel, ...
                          'Style','pushbutton', ...
                          'String','Delete', ...
                          'Callback',@(source,event)(self.controlActuated('DeleteDOChannelsButton',source,event)) );
        end  % method
        
        function layout_(self)
            % Layout parameters
            topAreaHeight = 60 ;
            deviceNamePopupXOffset = 100 ;
            deviceNamePopupWidth = 120 ;
            referenceClockPanelWidth = 340 ;
            referenceClockPanelHeight = 50 ;
%             referenceClockSourcePopupXOffset = 60 ;
%             referenceClockSourcePopupYOffset = 10 ;
%             referenceClockSourcePopupWidth = 110 ;
%             referenceClockRateEditXOffset = 225 ;
%             referenceClockRateEditYOffset = 10 ;
%             referenceClockRateEditWidth = 42 ;
            panelBorderSize=6;  % this is the space between the panel borders and the figure border on the left, right, and bottom
            interPanelSpaceWidth=10;
            interPanelSpaceHeight=10;
            panelToTitleRowSpaceHeight=28;  % need to accomodate the panel title, plus a bit more to make it look nice
            buttonsToFrameSpaceHeight=8;
            titleRowHeight=10;
            rowHeight=16;
            interRowHeight=10;
            %rowToRowHeight=rowHeight+interRowHeight;
            panelToChannelNameColSpaceWidth=5;
            channelNameEditWidth = 100 ;
            %spaceBetweenChannelNameAndTerminalNameWidth = 14 ;  % soon to be gone
            spaceBetweenChannelNameAndDeviceNameWidth = 14 ;
            spaceBetweenDeviceNameAndTerminalNameWidth = 14 ;
            terminalNamePopupWidth = 52 ;
            %diLabelWidthWanted=max(30,self.maximumDILabelTextWidth());
            %aiLabelWidthWanted=max(30,self.maximumAILabelTextWidth());
            %inputLabelWidth=max(diLabelWidthWanted,aiLabelWidthWanted);
            %inputLabelWidth = channelNameEditWidth + spaceBetweenChannelNameAndTerminalNameWidth + aiTerminalNamePopupWidth ;
            %aiLabelWidth=inputLabelWidth;            
            editShimHeight=5;
            editHeight=rowHeight+editShimHeight;  % shim makes it look nicer
            scaleEditWidth=42;
            scaleUnitsTextWidth = 36 ;
            unitsEditWidth=25;
            labelHeight=rowHeight;
            withinPanelRightPadWidth = 4 ;
            %aiPanelRightPadWidth = withinPanelRightPadWidth ;
            spaceBetweenTerminalAndRestWidth=14;
            spaceBetweenUnitsAndScaleWidth = 12 ;
            spaceBetweenScaleAndScaleUnitsWidth=2;
            %interUnitsSpaceWidth=0;            
            %doLabelWidthWanted=max(30,self.maximumDOLabelTextWidth());            
            %aoLabelWidthWanted=max(30,self.maximumAOLabelTextWidth());
            %outputLabelWidth=max(doLabelWidthWanted,aoLabelWidthWanted);            
            %outputLabelWidth = channelNameEditWidth + spaceBetweenChannelNameAndTerminalNameWidth + terminalNamePopupWidth ;
            %aoLabelWidth=outputLabelWidth;            
            %aoUnitsDenominatorTextWidth=12;
            spaceBetweenScaleUnitsAndCheckboxColsWidth=8;
            isActiveColWidth=46;
            spaceBeforeIsMarkedForDeletionColWidth=0;
            isMarkedForDeletionColWidth=46;
            spaceBelowTitleRowHeight=2;
            %spaceBeforeAOMultiplierColWidth=0;
            %aoMultiplierEditWidth=0;
            buttonHeight = 20 ;
            addButtonWidth = 46 ;
            deleteButtonWidth = 70 ;
            spaceBetweenRowsAndButtonsHeight = 14 ;
            spaceBetweenButtonsWidth = 8 ;
            extraSpaceFromDeleteButtonToBorder = 4 ;
            isTimedColWidth = 46 ;
            isOnColWidth = 46 ;
            
            % Derived layout parameters
            nAIs=length(self.AIChannelNameEdits);
            nAOs=length(self.AOChannelNameEdits);            
            nDIs=length(self.DIChannelNameEdits);            
            nDOs=length(self.DOChannelNameEdits);            
            nAnalogRows=max(nAIs,nAOs);
            nDigitalRows=max(nDIs,nDOs);
            %aoUnitsEditWidth=unitsEditWidth;
            %aoPanelRightPadWidth = withinPanelRightPadWidth ;
            aiPanelWidth = ...
                panelToChannelNameColSpaceWidth+...
                channelNameEditWidth + ...
                spaceBetweenChannelNameAndDeviceNameWidth + ...
                deviceNamePopupWidth + ...
                spaceBetweenDeviceNameAndTerminalNameWidth + ...
                terminalNamePopupWidth + ...                
                spaceBetweenTerminalAndRestWidth+ ...
                unitsEditWidth+ ...
                spaceBetweenUnitsAndScaleWidth + ...
                scaleEditWidth+ ...
                spaceBetweenScaleAndScaleUnitsWidth+ ...
                scaleUnitsTextWidth+ ...
                spaceBetweenScaleUnitsAndCheckboxColsWidth + ...
                isActiveColWidth+ ...
                spaceBeforeIsMarkedForDeletionColWidth + ...
                isMarkedForDeletionColWidth+ ...                
                withinPanelRightPadWidth ;
            diPanelWidth = aiPanelWidth ;
            aoPanelWidth = ...
                panelToChannelNameColSpaceWidth+...
                channelNameEditWidth + ...
                spaceBetweenChannelNameAndDeviceNameWidth + ...
                deviceNamePopupWidth + ...
                spaceBetweenDeviceNameAndTerminalNameWidth + ...
                terminalNamePopupWidth + ...                
                spaceBetweenTerminalAndRestWidth+ ...
                unitsEditWidth+ ...
                spaceBetweenUnitsAndScaleWidth + ...
                scaleEditWidth+ ...
                spaceBetweenScaleAndScaleUnitsWidth+ ...
                scaleUnitsTextWidth+ ...
                spaceBetweenScaleUnitsAndCheckboxColsWidth + ...
                isMarkedForDeletionColWidth+ ...                
                withinPanelRightPadWidth ;
            doPanelWidth = aoPanelWidth ;
            analogPanelsHeight = panelToTitleRowSpaceHeight + titleRowHeight + spaceBelowTitleRowHeight + ...
                                 max(0,(nAnalogRows-1))*interRowHeight + nAnalogRows*rowHeight + ...
                                 spaceBetweenRowsAndButtonsHeight + ...
                                 buttonHeight + ...
                                 buttonsToFrameSpaceHeight ;
            digitalPanelsHeight = panelToTitleRowSpaceHeight + titleRowHeight + spaceBelowTitleRowHeight + ...
                                  max(0,(nDigitalRows-1))*interRowHeight + nDigitalRows*rowHeight + ...
                                  spaceBetweenRowsAndButtonsHeight + ...
                                  buttonHeight + ...
                                  buttonsToFrameSpaceHeight ;
            figureHeight = topAreaHeight + analogPanelsHeight + interPanelSpaceHeight + digitalPanelsHeight + panelBorderSize ;
            figureWidth = panelBorderSize + aiPanelWidth + interPanelSpaceWidth + aoPanelWidth + panelBorderSize ;
            
            % Position the figure, keeping upper left corner fixed
            currentPosition=get(self.FigureGH_,'Position');
            currentOffset=currentPosition(1:2);
            currentSize=currentPosition(3:4);
            currentUpperY=currentOffset(2)+currentSize(2);
            figurePosition=[currentOffset(1) currentUpperY-figureHeight figureWidth figureHeight];
            set(self.FigureGH_,'Position',figurePosition);
            
            % Position the device name popup in the middle (vertically) of
            % the top area, at the given x offset.
            deviceNamePopupPosition = get(self.DeviceNamePopup, 'Position') ;
            deviceNamePopupHeight = deviceNamePopupPosition(4) ;
            deviceNamePopupYOffset = figureHeight - topAreaHeight + (topAreaHeight - deviceNamePopupHeight) /2 ;
            ws.positionPopupmenuAndLabelBang(self.DeviceNamePopupLabelText,self.DeviceNamePopup, ...
                                             deviceNamePopupXOffset,deviceNamePopupYOffset,deviceNamePopupWidth) ;
            
            % Layout the ReferenceClock panel
            self.layoutReferenceClockPanel_(figureWidth, ...
                                            figureHeight, ...
                                            topAreaHeight, ...
                                            panelBorderSize, ...
                                            referenceClockPanelWidth, ...
                                            referenceClockPanelHeight) ;
                                         
            % Position the AIs panel, and layout its contents
            self.layoutAIPanel_(panelBorderSize, ...
                                aiPanelWidth, ...
                                interPanelSpaceHeight, ...                                
                                analogPanelsHeight, ...
                                digitalPanelsHeight, ...
                                panelToTitleRowSpaceHeight, ...
                                titleRowHeight, ...
                                panelToChannelNameColSpaceWidth, ...
                                spaceBelowTitleRowHeight, ...
                                rowHeight, ...
                                interRowHeight, ...
                                spaceBetweenTerminalAndRestWidth, ...
                                channelNameEditWidth, ...
                                spaceBetweenChannelNameAndDeviceNameWidth, ...
                                deviceNamePopupWidth, ...
                                spaceBetweenDeviceNameAndTerminalNameWidth, ...                                
                                terminalNamePopupWidth , ...
                                scaleEditWidth, ...
                                spaceBetweenScaleAndScaleUnitsWidth, ...
                                scaleUnitsTextWidth, ...
                                unitsEditWidth, ...
                                spaceBetweenScaleUnitsAndCheckboxColsWidth, ...
                                isActiveColWidth, ...
                                spaceBeforeIsMarkedForDeletionColWidth, ...
                                isMarkedForDeletionColWidth, ...                                
                                labelHeight, ...
                                editHeight, ...
                                editShimHeight, ...
                                extraSpaceFromDeleteButtonToBorder, ...
                                buttonsToFrameSpaceHeight, ...
                                deleteButtonWidth, ...
                                spaceBetweenButtonsWidth, ...
                                addButtonWidth, ...
                                buttonHeight, ...
                                spaceBetweenUnitsAndScaleWidth) ;
                            
            % Position and layout the AOs panel
            self.layoutAOPanel_(panelBorderSize, ...
                                aiPanelWidth, ...
                                aoPanelWidth, ...
                                interPanelSpaceWidth, ...                                                                
                                interPanelSpaceHeight, ...                                
                                analogPanelsHeight, ...
                                digitalPanelsHeight, ...
                                panelToTitleRowSpaceHeight, ...
                                titleRowHeight, ...
                                panelToChannelNameColSpaceWidth, ...
                                spaceBelowTitleRowHeight, ...
                                rowHeight, ...
                                interRowHeight, ...
                                spaceBetweenTerminalAndRestWidth, ...
                                channelNameEditWidth , ...
                                spaceBetweenChannelNameAndDeviceNameWidth, ...
                                deviceNamePopupWidth, ...
                                spaceBetweenDeviceNameAndTerminalNameWidth, ...                                
                                terminalNamePopupWidth , ...
                                scaleEditWidth, ...
                                spaceBetweenScaleAndScaleUnitsWidth, ...
                                scaleUnitsTextWidth, ...
                                unitsEditWidth, ...
                                spaceBetweenScaleUnitsAndCheckboxColsWidth, ...
                                isMarkedForDeletionColWidth, ...                                                                
                                labelHeight, ...
                                editHeight, ...
                                editShimHeight, ...
                                extraSpaceFromDeleteButtonToBorder, ...
                                buttonsToFrameSpaceHeight, ...
                                deleteButtonWidth, ...
                                spaceBetweenButtonsWidth, ...
                                addButtonWidth, ...
                                buttonHeight, ...
                                spaceBetweenUnitsAndScaleWidth) ;
            
            % Position and layout the DIs panel
            self.layoutDIPanel_(panelBorderSize, ...
                                aiPanelWidth, ...
                                diPanelWidth, ...
                                digitalPanelsHeight, ...
                                panelToTitleRowSpaceHeight, ...
                                titleRowHeight, ...
                                panelToChannelNameColSpaceWidth, ...
                                spaceBelowTitleRowHeight, ...
                                rowHeight, ...
                                interRowHeight, ...
                                spaceBetweenTerminalAndRestWidth, ...
                                channelNameEditWidth , ...
                                spaceBetweenChannelNameAndDeviceNameWidth, ...
                                deviceNamePopupWidth, ...
                                spaceBetweenDeviceNameAndTerminalNameWidth, ...                                
                                terminalNamePopupWidth , ...
                                scaleEditWidth, ...
                                spaceBetweenScaleAndScaleUnitsWidth, ...
                                scaleUnitsTextWidth, ...
                                unitsEditWidth, ...
                                spaceBetweenScaleUnitsAndCheckboxColsWidth, ...
                                isActiveColWidth, ...
                                spaceBeforeIsMarkedForDeletionColWidth, ...
                                isMarkedForDeletionColWidth, ...                                                                
                                labelHeight, ...
                                editHeight, ...
                                editShimHeight, ...
                                extraSpaceFromDeleteButtonToBorder, ...
                                buttonsToFrameSpaceHeight, ...
                                deleteButtonWidth, ...
                                spaceBetweenButtonsWidth, ...
                                addButtonWidth, ...
                                buttonHeight, ...
                                spaceBetweenUnitsAndScaleWidth) ;
            
            % Position and layout the DO panel
            self.layoutDOPanel_(panelBorderSize, ...
                                interPanelSpaceWidth , ...
                                aiPanelWidth, ...
                                doPanelWidth, ...
                                digitalPanelsHeight, ...
                                panelToTitleRowSpaceHeight, ...
                                titleRowHeight, ...
                                panelToChannelNameColSpaceWidth, ...
                                spaceBelowTitleRowHeight, ...
                                rowHeight, ...
                                interRowHeight, ...
                                channelNameEditWidth , ...
                                spaceBetweenChannelNameAndDeviceNameWidth, ...
                                deviceNamePopupWidth, ...
                                spaceBetweenDeviceNameAndTerminalNameWidth, ...                                
                                terminalNamePopupWidth , ...
                                isTimedColWidth, ...
                                isOnColWidth, ...
                                isMarkedForDeletionColWidth, ...                                                                
                                editHeight, ...
                                editShimHeight, ...
                                extraSpaceFromDeleteButtonToBorder, ...
                                buttonsToFrameSpaceHeight, ...
                                deleteButtonWidth, ...
                                spaceBetweenButtonsWidth, ...
                                addButtonWidth, ...
                                buttonHeight, ...
                                withinPanelRightPadWidth )
        end  % method
    
        function layoutReferenceClockPanel_(self, ...
                                            figureWidth, ...
                                            figureHeight, ...
                                            topAreaHeight, ...
                                            panelBorderSize, ...
                                            referenceClockPanelWidth, ...
                                            referenceClockPanelHeight)

            % Internal layout parameters                      
            referenceClockSourcePopupXOffset = 60 ;
            referenceClockSourcePopupYOffset = 10 ;
            referenceClockSourcePopupWidth = 140 ;
            referenceClockRateEditXOffset = 255 ;
            referenceClockRateEditYOffset = 10 ;
            referenceClockRateEditWidth = 42 ;
                                  
            % Position the panel itself flush left, centered vertically within the top area of the figure
            referenceClockPanelXOffset = figureWidth - panelBorderSize - referenceClockPanelWidth ;
            referenceClockPanelYOffset = figureHeight - topAreaHeight/2 - referenceClockPanelHeight/2 ;
            set(self.ReferenceClockPanel, 'Position', [referenceClockPanelXOffset referenceClockPanelYOffset referenceClockPanelWidth referenceClockPanelHeight]) ;
                                  
            % Position the reference clock source popup in the middle (vertically) of
            % the panel, at the given x offset.
            %timebaseSourcePopupPosition = get(self.ReferenceClockSourcePopup, 'Position') ;
            %timebaseSourcePopupHeight = timebaseSourcePopupPosition(4) ;
            %timebaseSourcePopupYOffset = timebasePanelHeight/2 - timebaseSourcePopupHeight/2 ;
            ws.positionPopupmenuAndLabelBang(self.ReferenceClockSourcePopupLabelText, self.ReferenceClockSourcePopup, ...
                                             referenceClockSourcePopupXOffset, referenceClockSourcePopupYOffset, referenceClockSourcePopupWidth) ;
                                         
            % Position the referenceClock rate edit in the middle (vertically) of
            % the panel, at the given x offset.                      
            %referenceClockRateEditPosition = get(self.ReferenceClockRateEdit, 'Position') ;
            %referenceClockRateEditHeight = referenceClockRateEditPosition(4) ;
            %referenceClockRateEditYOffset = referenceClockPanelHeight/2 - referenceClockRateEditHeight/2 ;
            ws.positionEditLabelAndUnitsBang(self.ReferenceClockRateEditLabelText, self.ReferenceClockRateEdit, self.ReferenceClockRateEditUnitsText, ...
                                             referenceClockRateEditXOffset,referenceClockRateEditYOffset,referenceClockRateEditWidth) ;
        end
        
        function layoutAIPanel_(self, ...
                                panelBorderSize, ...
                                aiPanelWidth, ...
                                interPanelSpaceHeight, ...                                
                                analogPanelsHeight, ...
                                digitalPanelsHeight, ...
                                panelToTitleRowSpaceHeight, ...
                                titleRowHeight, ...
                                panelToChannelNameColSpaceWidth, ...
                                spaceBelowTitleRowHeight, ...
                                rowHeight, ...
                                interRowHeight, ...
                                spaceBetweenTerminalAndRestWidth, ...
                                channelNameEditWidth , ...
                                spaceBetweenChannelNameAndDeviceNameWidth, ...
                                deviceNamePopupWidth, ...
                                spaceBetweenDeviceNameAndTerminalNameWidth, ...                                
                                terminalNamePopupWidth , ...
                                scaleEditWidth, ...
                                spaceBetweenScaleAndScaleUnitsWidth, ...
                                scaleUnitsTextWidth, ...
                                unitsEditWidth, ...
                                spaceBetweenScaleUnitsAndCheckboxColsWidth, ...
                                isActiveColWidth, ...
                                spaceBeforeIsMarkedForDeletionColWidth, ...
                                isMarkedForDeletionColWidth, ...                                                                
                                labelHeight, ...
                                editHeight, ...
                                editShimHeight, ...
                                extraSpaceFromDeleteButtonToBorder, ...
                                buttonsToFrameSpaceHeight, ...
                                deleteButtonWidth, ...
                                spaceBetweenButtonsWidth, ...
                                addButtonWidth, ...
                                buttonHeight, ...
                                spaceBetweenUnitsAndScaleWidth)
                            
            % Define constants     
            nAIs = length(self.AIChannelNameEdits) ;            
            rowToRowHeight=rowHeight+interRowHeight;

            % Position the AIs panel
            set(self.AIsPanel, 'Position', [panelBorderSize panelBorderSize+digitalPanelsHeight+interPanelSpaceHeight aiPanelWidth analogPanelsHeight]) ;
            
            %
            %  Layout the row of column titles in AI panel
            %
            titleRowBottomY = analogPanelsHeight - panelToTitleRowSpaceHeight - titleRowHeight ;
            
            % Channel Name
            channelNameColLeftX = panelToChannelNameColSpaceWidth ;
            ws.alignTextInRectangleBang(self.AIChannelNameColTitleText, ...
                                        [channelNameColLeftX titleRowBottomY channelNameEditWidth titleRowHeight], ...
                                        'cm');
            
            % Device Name                                            
            deviceNameColLeftX = channelNameColLeftX + channelNameEditWidth + spaceBetweenChannelNameAndDeviceNameWidth ;
            ws.alignTextInRectangleBang(self.AIDeviceNameColTitleText, ...
                                        [deviceNameColLeftX titleRowBottomY deviceNamePopupWidth titleRowHeight], ...
                                        'cm');
            
            % Channel Terminal Name                                            
            terminalNameColLeftX = deviceNameColLeftX + deviceNamePopupWidth + spaceBetweenDeviceNameAndTerminalNameWidth ;
            ws.alignTextInRectangleBang(self.AITerminalNameColTitleText, ...
                                        [terminalNameColLeftX titleRowBottomY terminalNamePopupWidth titleRowHeight], ...
                                        'cm');
            
            % Channel Unit
            unitColLeftX = terminalNameColLeftX + terminalNamePopupWidth + spaceBetweenTerminalAndRestWidth ;
            ws.alignTextInRectangleBang(self.AIUnitsColTitleText, ...
                                                [unitColLeftX titleRowBottomY unitsEditWidth titleRowHeight], ...
                                                'cm');
            
            % Channel Scale Factor
            scaleColLeftX = unitColLeftX + unitsEditWidth + spaceBetweenUnitsAndScaleWidth ;
            ws.alignTextInRectangleBang(self.AIScaleColTitleText, ...
                                                [scaleColLeftX titleRowBottomY scaleEditWidth titleRowHeight], ...
                                                'cm');
            
            % Active?                                
            isActiveColLeftX = scaleColLeftX + scaleEditWidth + spaceBetweenScaleAndScaleUnitsWidth + ...
                               scaleUnitsTextWidth + ...
                               spaceBetweenScaleUnitsAndCheckboxColsWidth ;
            ws.alignTextInRectangleBang(self.AIIsActiveColTitleText, [isActiveColLeftX titleRowBottomY isActiveColWidth titleRowHeight], 'cm');
            
            % Delete?
            isMarkedForDeletionColLeftX=isActiveColLeftX + isActiveColWidth + spaceBeforeIsMarkedForDeletionColWidth ;
            ws.alignTextInRectangleBang(self.AIIsMarkedForDeletionColTitleText, ...
                                                [isMarkedForDeletionColLeftX titleRowBottomY isMarkedForDeletionColWidth titleRowHeight], ...
                                                'cm');
            
            % Position the stuff in the AI rows            
            aiYRowBottom=titleRowBottomY-spaceBelowTitleRowHeight-rowHeight;   
            for i=1:nAIs ,
                % channel name
                xColLeft=panelToChannelNameColSpaceWidth;
                set(self.AIChannelNameEdits(i), ...
                    'Position',[xColLeft aiYRowBottom-editShimHeight channelNameEditWidth editHeight]);  % shim to make look nice
                % device name
                xColLeft = xColLeft + channelNameEditWidth + spaceBetweenChannelNameAndDeviceNameWidth ;
                set(self.AIDeviceNamePopups(i), ...
                    'Position',[xColLeft aiYRowBottom deviceNamePopupWidth rowHeight]);  % shim to make look nice
                % terminal name
                xColLeft = xColLeft + deviceNamePopupWidth + spaceBetweenDeviceNameAndTerminalNameWidth ;
                set(self.AITerminalNamePopups(i), ...
                    'Position',[xColLeft aiYRowBottom terminalNamePopupWidth rowHeight]);  % shim to make look nice
                % units
                xColLeft = xColLeft + terminalNamePopupWidth + spaceBetweenTerminalAndRestWidth ;
                set(self.AIUnitsEdits(i), ...
                    'Position',[xColLeft aiYRowBottom-editShimHeight unitsEditWidth editHeight] );
                % scale
                xColLeft = xColLeft + unitsEditWidth + spaceBetweenUnitsAndScaleWidth ;
                set(self.AIScaleEdits(i), ...
                    'Position',[xColLeft aiYRowBottom-editShimHeight scaleEditWidth editHeight]);
                % scale units
                xColLeft = xColLeft + scaleEditWidth + spaceBetweenScaleAndScaleUnitsWidth ;
                set(self.AIScaleUnitsTexts(i), ...
                    'Position',[xColLeft aiYRowBottom-4 scaleUnitsTextWidth labelHeight]);
                % active?
                xColLeft = xColLeft + scaleUnitsTextWidth + spaceBetweenScaleUnitsAndCheckboxColsWidth ;
                ws.centerCheckboxBang(self.AIIsActiveCheckboxes(i),[xColLeft+isActiveColWidth/2 aiYRowBottom+rowHeight/2]);
                % delete?
                xColLeft = xColLeft + isActiveColWidth + spaceBeforeIsMarkedForDeletionColWidth ;
                ws.centerCheckboxBang(self.AIIsMarkedForDeletionCheckboxes(i),[xColLeft+isMarkedForDeletionColWidth/2 aiYRowBottom+rowHeight/2]);                
                
                % Prepare for next iteration
                aiYRowBottom=aiYRowBottom-rowToRowHeight;
            end
            
            % Position the AI Panel buttons
            buttonYOffset = buttonsToFrameSpaceHeight ;
            
            deleteButtonXOffset = aiPanelWidth - panelBorderSize - extraSpaceFromDeleteButtonToBorder - deleteButtonWidth ;  % delete button is flush right
            deleteButtonYOffset = buttonYOffset ;
            deleteButtonHeight = buttonHeight ;
            set(self.DeleteAIChannelsButton, ...
                'Position',[deleteButtonXOffset deleteButtonYOffset deleteButtonWidth deleteButtonHeight]) ;
            
            addButtonXOffset = deleteButtonXOffset - spaceBetweenButtonsWidth - addButtonWidth ;  % add button is to left of delete button
            addButtonYOffset = buttonYOffset ;
            addButtonHeight = buttonHeight ;
            set(self.AddAIChannelButton, ...
                'Position',[addButtonXOffset addButtonYOffset addButtonWidth addButtonHeight]) ;
        end  % function
        
        function layoutAOPanel_(self, ...
                                panelBorderSize, ...
                                aiPanelWidth, ...
                                aoPanelWidth, ...
                                interPanelSpaceWidth, ...                                
                                interPanelSpaceHeight, ...                                
                                analogPanelsHeight, ...
                                digitalPanelsHeight, ...
                                panelToTitleRowSpaceHeight, ...
                                titleRowHeight, ...
                                panelToChannelNameColSpaceWidth, ...
                                spaceBelowTitleRowHeight, ...
                                rowHeight, ...
                                interRowHeight, ...
                                spaceBetweenTerminalAndRestWidth, ...
                                channelNameEditWidth , ...
                                spaceBetweenChannelNameAndDeviceNameWidth, ...
                                deviceNamePopupWidth, ...
                                spaceBetweenDeviceNameAndTerminalNameWidth, ...                                
                                terminalNamePopupWidth , ...
                                scaleEditWidth, ...
                                spaceBetweenScaleAndScaleUnitsWidth, ...
                                scaleUnitsTextWidth, ...
                                unitsEditWidth, ...
                                spaceBetweenScaleUnitsAndCheckboxColsWidth, ...
                                isMarkedForDeletionColWidth, ...                                                                
                                labelHeight, ...
                                editHeight, ...
                                editShimHeight, ...
                                extraSpaceFromDeleteButtonToBorder, ...
                                buttonsToFrameSpaceHeight, ...
                                deleteButtonWidth, ...
                                spaceBetweenButtonsWidth, ...
                                addButtonWidth, ...
                                buttonHeight, ...
                                spaceBetweenUnitsAndScaleWidth)
                            
            % Define constants     
            nAOs = length(self.AOChannelNameEdits) ;            
            rowToRowHeight=rowHeight+interRowHeight;
            isActiveColWidth = 0;  % This col doesn't exist for outputs
            spaceBeforeIsMarkedForDeletionColWidth = 0 ;
            
            % Position the AOs panel
            panelXOffset = panelBorderSize+aiPanelWidth+interPanelSpaceWidth ;
            panelYOffset = panelBorderSize+digitalPanelsHeight+interPanelSpaceHeight ;
            set(self.AOsPanel, 'Position', [ panelXOffset panelYOffset aoPanelWidth analogPanelsHeight]) ;
            
            %
            %  Layout the row of column titles in AO panel
            %
            titleRowBottomY = analogPanelsHeight - panelToTitleRowSpaceHeight - titleRowHeight ;
            
            % Channel Name
            channelNameColLeftX = panelToChannelNameColSpaceWidth ;
            ws.alignTextInRectangleBang(self.AOChannelNameColTitleText, ...
                                        [channelNameColLeftX titleRowBottomY channelNameEditWidth titleRowHeight], ...
                                        'cm');
            
            % Device Name                                            
            deviceNameColLeftX = channelNameColLeftX + channelNameEditWidth + spaceBetweenChannelNameAndDeviceNameWidth ;
            ws.alignTextInRectangleBang(self.AODeviceNameColTitleText, ...
                                        [deviceNameColLeftX titleRowBottomY deviceNamePopupWidth titleRowHeight], ...
                                        'cm');
            
            % Channel Terminal Name                                            
            terminalNameColLeftX = deviceNameColLeftX + deviceNamePopupWidth + spaceBetweenDeviceNameAndTerminalNameWidth ;
            ws.alignTextInRectangleBang(self.AOTerminalNameColTitleText, ...
                                        [terminalNameColLeftX titleRowBottomY terminalNamePopupWidth titleRowHeight], ...
                                        'cm');
            
            % Channel Unit
            unitColLeftX = terminalNameColLeftX + terminalNamePopupWidth + spaceBetweenTerminalAndRestWidth ;
            ws.alignTextInRectangleBang(self.AOUnitsColTitleText, ...
                                        [unitColLeftX titleRowBottomY unitsEditWidth titleRowHeight], ...
                                        'cm');
            
            % Channel Scale Factor
            scaleColLeftX = unitColLeftX + unitsEditWidth + spaceBetweenUnitsAndScaleWidth ;
            ws.alignTextInRectangleBang(self.AOScaleColTitleText, ...
                                        [scaleColLeftX titleRowBottomY scaleEditWidth titleRowHeight], ...
                                        'cm');
            
            % Active?                                
            isActiveColLeftX = scaleColLeftX + scaleEditWidth + spaceBetweenScaleAndScaleUnitsWidth + ...
                               scaleUnitsTextWidth + ...
                               spaceBetweenScaleUnitsAndCheckboxColsWidth ;
            %ws.alignTextInRectangleBang(self.AOIsActiveColTitleText, [isActiveColLeftX titleRowBottomY isActiveColWidth titleRowHeight], 'cm');
            
            % Delete?
            isMarkedForDeletionColLeftX=isActiveColLeftX + isActiveColWidth + spaceBeforeIsMarkedForDeletionColWidth ;
            ws.alignTextInRectangleBang(self.AOIsMarkedForDeletionColTitleText, ...
                                        [isMarkedForDeletionColLeftX titleRowBottomY isMarkedForDeletionColWidth titleRowHeight], ...
                                        'cm');
            
            % Position the stuff in the AO rows            
            aiYRowBottom=titleRowBottomY-spaceBelowTitleRowHeight-rowHeight;   
            for i=1:nAOs ,
                % channel name
                xColLeft=panelToChannelNameColSpaceWidth;
                set(self.AOChannelNameEdits(i), ...
                    'Position',[xColLeft aiYRowBottom-editShimHeight channelNameEditWidth editHeight]);  % shim to make look nice
                % device name
                xColLeft = xColLeft + channelNameEditWidth + spaceBetweenChannelNameAndDeviceNameWidth ;
                set(self.AODeviceNamePopups(i), ...
                    'Position',[xColLeft aiYRowBottom deviceNamePopupWidth rowHeight]);  % shim to make look nice
                % terminal name
                xColLeft = xColLeft + deviceNamePopupWidth + spaceBetweenDeviceNameAndTerminalNameWidth ;
                set(self.AOTerminalNamePopups(i), ...
                    'Position',[xColLeft aiYRowBottom terminalNamePopupWidth rowHeight]);  % shim to make look nice
                % units
                xColLeft = xColLeft + terminalNamePopupWidth + spaceBetweenTerminalAndRestWidth ;
                set(self.AOUnitsEdits(i), ...
                    'Position',[xColLeft aiYRowBottom-editShimHeight unitsEditWidth editHeight] );
                % scale
                xColLeft = xColLeft + unitsEditWidth + spaceBetweenUnitsAndScaleWidth ;
                set(self.AOScaleEdits(i), ...
                    'Position',[xColLeft aiYRowBottom-editShimHeight scaleEditWidth editHeight]);
                % scale units
                xColLeft = xColLeft + scaleEditWidth + spaceBetweenScaleAndScaleUnitsWidth ;
                set(self.AOScaleUnitsTexts(i), ...
                    'Position',[xColLeft aiYRowBottom-4 scaleUnitsTextWidth labelHeight]);
                % active?
                xColLeft = xColLeft + scaleUnitsTextWidth + spaceBetweenScaleUnitsAndCheckboxColsWidth ;
                %ws.centerCheckboxBang(self.AOIsActiveCheckboxes(i),[xColLeft+isActiveColWidth/2 aiYRowBottom+rowHeight/2]);
                % delete?
                xColLeft = xColLeft + isActiveColWidth + spaceBeforeIsMarkedForDeletionColWidth ;
                ws.centerCheckboxBang(self.AOIsMarkedForDeletionCheckboxes(i),[xColLeft+isMarkedForDeletionColWidth/2 aiYRowBottom+rowHeight/2]);                
                
                % Prepare for next iteration
                aiYRowBottom=aiYRowBottom-rowToRowHeight;
            end
            
            % Position the AO Panel buttons
            buttonYOffset = buttonsToFrameSpaceHeight ;
            
            deleteButtonXOffset = aoPanelWidth - panelBorderSize - extraSpaceFromDeleteButtonToBorder - deleteButtonWidth ;  % delete button is flush right
            deleteButtonYOffset = buttonYOffset ;
            deleteButtonHeight = buttonHeight ;
            set(self.DeleteAOChannelsButton, ...
                'Position',[deleteButtonXOffset deleteButtonYOffset deleteButtonWidth deleteButtonHeight]) ;
            
            addButtonXOffset = deleteButtonXOffset - spaceBetweenButtonsWidth - addButtonWidth ;  % add button is to left of delete button
            addButtonYOffset = buttonYOffset ;
            addButtonHeight = buttonHeight ;
            set(self.AddAOChannelButton, ...
                'Position',[addButtonXOffset addButtonYOffset addButtonWidth addButtonHeight]) ;
        end  % function
        
        function layoutDIPanel_(self, ...
                                panelBorderSize, ...
                                aiPanelWidth, ...
                                diPanelWidth, ...
                                digitalPanelsHeight, ...
                                panelToTitleRowSpaceHeight, ...
                                titleRowHeight, ...
                                panelToChannelNameColSpaceWidth, ...
                                spaceBelowTitleRowHeight, ...
                                rowHeight, ...
                                interRowHeight, ...
                                spaceBetweenTerminalAndRestWidth, ...
                                channelNameEditWidth , ...
                                spaceBetweenChannelNameAndDeviceNameWidth, ...
                                deviceNamePopupWidth, ...
                                spaceBetweenDeviceNameAndTerminalNameWidth, ...                                
                                terminalNamePopupWidth , ...
                                scaleEditWidth, ...
                                spaceBetweenScaleAndScaleUnitsWidth, ...
                                scaleUnitsTextWidth, ...
                                unitsEditWidth, ...
                                spaceBetweenScaleUnitsAndCheckboxColsWidth, ...
                                isActiveColWidth, ...
                                spaceBeforeIsMarkedForDeletionColWidth, ...
                                isMarkedForDeletionColWidth, ...                                                                
                                labelHeight, ...
                                editHeight, ...
                                editShimHeight, ...
                                extraSpaceFromDeleteButtonToBorder, ...
                                buttonsToFrameSpaceHeight, ...
                                deleteButtonWidth, ...
                                spaceBetweenButtonsWidth, ...
                                addButtonWidth, ...
                                buttonHeight, ...
                                spaceBetweenUnitsAndScaleWidth)  %#ok<INUSL>
                            
            % Define constants     
            nDIs = length(self.DIChannelNameEdits) ;            
            rowToRowHeight = rowHeight + interRowHeight ;

            % Position the DIs panel
            set(self.DIsPanel, 'Position', [panelBorderSize panelBorderSize aiPanelWidth digitalPanelsHeight]) ;
            
            %
            %  Layout the row of column titles in DI panel
            %
            titleRowBottomY = digitalPanelsHeight - panelToTitleRowSpaceHeight - titleRowHeight ;
            
            % Channel Name
            channelNameColLeftX = panelToChannelNameColSpaceWidth ;
            ws.alignTextInRectangleBang(self.DIChannelNameColTitleText, ...
                                        [channelNameColLeftX titleRowBottomY channelNameEditWidth titleRowHeight], ...
                                        'cm');
            
            % Device Name                                            
            deviceNameColLeftX = channelNameColLeftX + channelNameEditWidth + spaceBetweenChannelNameAndDeviceNameWidth ;
            ws.alignTextInRectangleBang(self.DIDeviceNameColTitleText, ...
                                        [deviceNameColLeftX titleRowBottomY deviceNamePopupWidth titleRowHeight], ...
                                        'cm');
            
            % Channel Terminal Name                                            
            terminalNameColLeftX = deviceNameColLeftX + deviceNamePopupWidth + spaceBetweenDeviceNameAndTerminalNameWidth ;
            ws.alignTextInRectangleBang(self.DITerminalNameColTitleText, ...
                                        [terminalNameColLeftX titleRowBottomY terminalNamePopupWidth titleRowHeight], ...
                                        'cm');
            
            % Channel Unit
            unitColLeftX = terminalNameColLeftX + terminalNamePopupWidth + spaceBetweenTerminalAndRestWidth ;
%             ws.alignTextInRectangleBang(self.DIUnitsColTitleText, ...
%                                                 [unitColLeftX titleRowBottomY unitsEditWidth titleRowHeight], ...
%                                                 'cm');
            
            % Channel Scale Factor
            scaleColLeftX = unitColLeftX + unitsEditWidth + spaceBetweenUnitsAndScaleWidth ;
%             ws.alignTextInRectangleBang(self.DIScaleColTitleText, ...
%                                                 [scaleColLeftX titleRowBottomY scaleEditWidth titleRowHeight], ...
%                                                 'cm');
            
            % Active?                                
            isActiveColLeftX = scaleColLeftX + scaleEditWidth + spaceBetweenScaleAndScaleUnitsWidth + ...
                               scaleUnitsTextWidth + ...
                               spaceBetweenScaleUnitsAndCheckboxColsWidth ;
            ws.alignTextInRectangleBang(self.DIIsActiveColTitleText, [isActiveColLeftX titleRowBottomY isActiveColWidth titleRowHeight], 'cm');
            
            % Delete?
            isMarkedForDeletionColLeftX=isActiveColLeftX + isActiveColWidth + spaceBeforeIsMarkedForDeletionColWidth ;
            ws.alignTextInRectangleBang(self.DIIsMarkedForDeletionColTitleText, ...
                                        [isMarkedForDeletionColLeftX titleRowBottomY isMarkedForDeletionColWidth titleRowHeight], ...
                                        'cm');
            
            % Position the stuff in the DI rows            
            yRowBottom=titleRowBottomY-spaceBelowTitleRowHeight-rowHeight;   
            for i=1:nDIs ,
                % channel name
                xColLeft=panelToChannelNameColSpaceWidth;
                set(self.DIChannelNameEdits(i), ...
                    'Position',[xColLeft yRowBottom-editShimHeight channelNameEditWidth editHeight]);  % shim to make look nice
                % device name
                xColLeft = xColLeft + channelNameEditWidth + spaceBetweenChannelNameAndDeviceNameWidth ;
                set(self.DIDeviceNamePopups(i), ...
                    'Position',[xColLeft yRowBottom deviceNamePopupWidth rowHeight]);  % shim to make look nice
                % terminal name
                xColLeft = xColLeft + deviceNamePopupWidth + spaceBetweenDeviceNameAndTerminalNameWidth ;
                set(self.DITerminalNamePopups(i), ...
                    'Position',[xColLeft yRowBottom terminalNamePopupWidth rowHeight]);  % shim to make look nice
                % units
                xColLeft = xColLeft + terminalNamePopupWidth + spaceBetweenTerminalAndRestWidth ;
                %set(self.DIUnitsEdits(i), ...
                %    'Position',[xColLeft diYRowBottom-editShimHeight unitsEditWidth editHeight] );
                % scale
                xColLeft = xColLeft + unitsEditWidth + spaceBetweenUnitsAndScaleWidth ;
                %set(self.DIScaleEdits(i), ...
                %    'Position',[xColLeft diYRowBottom-editShimHeight scaleEditWidth editHeight]);
                % scale units
                xColLeft = xColLeft + scaleEditWidth + spaceBetweenScaleAndScaleUnitsWidth ;
                %set(self.DIScaleUnitsTexts(i), ...
                %    'Position',[xColLeft diYRowBottom-4 scaleUnitsTextWidth labelHeight]);
                % active?
                xColLeft = xColLeft + scaleUnitsTextWidth + spaceBetweenScaleUnitsAndCheckboxColsWidth ;
                ws.centerCheckboxBang(self.DIIsActiveCheckboxes(i),[xColLeft+isActiveColWidth/2 yRowBottom+rowHeight/2]);
                % delete?
                xColLeft = xColLeft + isActiveColWidth + spaceBeforeIsMarkedForDeletionColWidth ;
                ws.centerCheckboxBang(self.DIIsMarkedForDeletionCheckboxes(i),[xColLeft+isMarkedForDeletionColWidth/2 yRowBottom+rowHeight/2]);                
                
                % Prepare for next iteration
                yRowBottom=yRowBottom-rowToRowHeight;
            end
            
            % Position the DI Panel buttons
            buttonYOffset = buttonsToFrameSpaceHeight ;
            
            deleteButtonXOffset = diPanelWidth - panelBorderSize - extraSpaceFromDeleteButtonToBorder - deleteButtonWidth ;  % delete button is flush right
            deleteButtonYOffset = buttonYOffset ;
            deleteButtonHeight = buttonHeight ;
            set(self.DeleteDIChannelsButton, ...
                'Position',[deleteButtonXOffset deleteButtonYOffset deleteButtonWidth deleteButtonHeight]) ;
            
            addButtonXOffset = deleteButtonXOffset - spaceBetweenButtonsWidth - addButtonWidth ;  % add button is to left of delete button
            addButtonYOffset = buttonYOffset ;
            addButtonHeight = buttonHeight ;
            set(self.AddDIChannelButton, ...
                'Position',[addButtonXOffset addButtonYOffset addButtonWidth addButtonHeight]) ;
        end  % function
        
        function layoutDOPanel_(self, ...
                                panelBorderSize, ...
                                interPanelSpaceWidth , ...
                                aiPanelWidth, ...
                                doPanelWidth, ...
                                digitalPanelsHeight, ...
                                panelToTitleRowSpaceHeight, ...
                                titleRowHeight, ...
                                panelToChannelNameColSpaceWidth, ...
                                spaceBelowTitleRowHeight, ...
                                rowHeight, ...
                                interRowHeight, ...
                                channelNameEditWidth , ...
                                spaceBetweenChannelNameAndDeviceNameWidth, ...
                                deviceNamePopupWidth, ...
                                spaceBetweenDeviceNameAndTerminalNameWidth, ...                                
                                terminalNamePopupWidth , ...
                                isTimedColWidth, ...
                                isOnColWidth, ...
                                isMarkedForDeletionColWidth, ...                                                                
                                editHeight, ...
                                editShimHeight, ...
                                extraSpaceFromDeleteButtonToBorder, ...
                                buttonsToFrameSpaceHeight, ...
                                deleteButtonWidth, ...
                                spaceBetweenButtonsWidth, ...
                                addButtonWidth, ...
                                buttonHeight, ...
                                withinPanelRightPadWidth )
                            
            % Define constants     
            nDOs = length(self.DOChannelNameEdits) ;            
            rowToRowHeight = rowHeight + interRowHeight ;

            % Position the DOs panel
            panelXOffset = panelBorderSize + aiPanelWidth + interPanelSpaceWidth ;
            set(self.DOsPanel, 'Position', [panelXOffset ...
                                            panelBorderSize ...
                                            doPanelWidth ...
                                            digitalPanelsHeight]) ;
            
            %
            %  Layout the row of column titles in DO panel
            %
            titleRowBottomY = digitalPanelsHeight - panelToTitleRowSpaceHeight - titleRowHeight ;
            
            % Channel Name
            channelNameColLeftX = panelToChannelNameColSpaceWidth ;
            ws.alignTextInRectangleBang(self.DOChannelNameColTitleText, ...
                                        [channelNameColLeftX titleRowBottomY channelNameEditWidth titleRowHeight], ...
                                        'cm');
            
            % Device Name                                            
            deviceNameColLeftX = channelNameColLeftX + channelNameEditWidth + spaceBetweenChannelNameAndDeviceNameWidth ;
            ws.alignTextInRectangleBang(self.DODeviceNameColTitleText, ...
                                        [deviceNameColLeftX titleRowBottomY deviceNamePopupWidth titleRowHeight], ...
                                        'cm');
            
            % Channel Terminal Name                                            
            terminalNameColLeftX = deviceNameColLeftX + deviceNamePopupWidth + spaceBetweenDeviceNameAndTerminalNameWidth ;
            ws.alignTextInRectangleBang(self.DOTerminalNameColTitleText, ...
                                        [terminalNameColLeftX titleRowBottomY terminalNamePopupWidth titleRowHeight], ...
                                        'cm');
                                            
%             % Channel Units
%             unitsColLeftX = terminalNameColLeftX + terminalNamePopupWidth + spaceBetweenTerminalAndRestWidth ;
%             ws.alignTextInRectangleBang(self.DOUnitsColTitleText, ...
%                                                 [unitsColLeftX titleRowBottomY unitsEditWidth titleRowHeight], ...
%                                                 'cm');
            
            % Channel Scale Factor
            %scaleColLeftX = unitsColLeftX + unitsEditWidth + spaceBetweenUnitsAndScaleWidth ;
%             ws.alignTextInRectangleBang(self.DOScaleColTitleText, ...
%                                                 [scaleColLeftX titleRowBottomY scaleEditWidth titleRowHeight], ...
%                                                 'cm');
            
            % Timed?                                
            isTimedColLeftX = doPanelWidth - ( isTimedColWidth + isOnColWidth + isMarkedForDeletionColWidth + withinPanelRightPadWidth ) ;
            ws.alignTextInRectangleBang(self.DOIsTimedColTitleText, [isTimedColLeftX titleRowBottomY isTimedColWidth titleRowHeight], 'cm');
            
            % On?                                
            isOnColLeftX = doPanelWidth - ( isOnColWidth + isMarkedForDeletionColWidth + withinPanelRightPadWidth ) ;
            ws.alignTextInRectangleBang(self.DOIsOnColTitleText, [isOnColLeftX titleRowBottomY isOnColWidth titleRowHeight], 'cm');
            
            % Delete?
            isMarkedForDeletionColLeftX = doPanelWidth - ( isMarkedForDeletionColWidth + withinPanelRightPadWidth ) ;
            ws.alignTextInRectangleBang(self.DOIsMarkedForDeletionColTitleText, ...
                                                [isMarkedForDeletionColLeftX titleRowBottomY isMarkedForDeletionColWidth titleRowHeight], ...
                                                'cm');
            
            % Position the stuff in the DO rows            
            yRowBottom=titleRowBottomY-spaceBelowTitleRowHeight-rowHeight;   
            for i=1:nDOs ,
                % channel name
                %xColLeft=panelToChannelNameColSpaceWidth;
                set(self.DOChannelNameEdits(i), ...
                    'Position',[channelNameColLeftX yRowBottom-editShimHeight channelNameEditWidth editHeight]);  % shim to make look nice
                % device name
                %xColLeft = xColLeft + channelNameEditWidth + spaceBetweenChannelNameAndDeviceNameWidth ;
                set(self.DODeviceNamePopups(i), ...
                    'Position',[deviceNameColLeftX yRowBottom deviceNamePopupWidth rowHeight]);  % shim to make look nice
                % terminal name
                %xColLeft = xColLeft + channelNameEditWidth + spaceBetweenChannelNameAndTerminalNameWidth ;
                set(self.DOTerminalNamePopups(i), ...
                    'Position',[terminalNameColLeftX yRowBottom terminalNamePopupWidth rowHeight]);  % shim to make look nice
                % units
                %xColLeft = xColLeft + terminalNamePopupWidth + spaceBetweenTerminalAndRestWidth ;
                %set(self.DOUnitsEdits(i), ...
                %    'Position',[xColLeft diYRowBottom-editShimHeight unitsEditWidth editHeight] );
                % scale
                %xColLeft = xColLeft + unitsEditWidth + spaceBetweenUnitsAndScaleWidth ;
                %set(self.DOScaleEdits(i), ...
                %    'Position',[xColLeft diYRowBottom-editShimHeight scaleEditWidth editHeight]);
                % scale units
                %xColLeft = xColLeft + scaleEditWidth + spaceBetweenScaleAndScaleUnitsWidth ;
                %set(self.DOScaleUnitsTexts(i), ...
                %    'Position',[xColLeft diYRowBottom-4 scaleUnitsTextWidth labelHeight]);
                % timed?
                %xColLeft = isTimedColLeftX ;
                ws.centerCheckboxBang(self.DOIsTimedCheckboxes(i),[isTimedColLeftX+isTimedColWidth/2 yRowBottom+rowHeight/2]);
                % on?
                %xColLeft = xColLeft + isTimedColWidth + spaceBetweenScaleUnitsAndCheckboxColsWidth ;
                ws.centerCheckboxBang(self.DOIsOnRadiobuttons(i),[isOnColLeftX+isOnColWidth/2 yRowBottom+rowHeight/2]);
                % delete?
                %xColLeft = xColLeft + isOnColWidth + spaceBeforeIsMarkedForDeletionColWidth ;
                ws.centerCheckboxBang(self.DOIsMarkedForDeletionCheckboxes(i),[isMarkedForDeletionColLeftX+isMarkedForDeletionColWidth/2 yRowBottom+rowHeight/2]);                
                
                % Prepare for next iteration
                yRowBottom=yRowBottom-rowToRowHeight;
            end
            
            % Position the DO Panel buttons
            buttonYOffset = buttonsToFrameSpaceHeight ;
            
            deleteButtonXOffset = doPanelWidth - panelBorderSize - extraSpaceFromDeleteButtonToBorder - deleteButtonWidth ;  % delete button is flush right
            deleteButtonYOffset = buttonYOffset ;
            deleteButtonHeight = buttonHeight ;
            set(self.DeleteDOChannelsButton, ...
                'Position',[deleteButtonXOffset deleteButtonYOffset deleteButtonWidth deleteButtonHeight]) ;
            
            addButtonXOffset = deleteButtonXOffset - spaceBetweenButtonsWidth - addButtonWidth ;  % add button is to left of delete button
            addButtonYOffset = buttonYOffset ;
            addButtonHeight = buttonHeight ;
            set(self.AddDOChannelButton, ...
                'Position',[addButtonXOffset addButtonYOffset addButtonWidth addButtonHeight]) ;
        end  % function
        
%         function layoutDOPanel_(self, ...
%                                 panelBorderSize, ...
%                                 aiPanelWidth, ...
%                                 interPanelSpaceWidth, ...
%                                 aoPanelWidth, ...
%                                 digitalPanelsHeight, ...
%                                 panelToTitleRowSpaceHeight, ...
%                                 titleRowHeight, ...
%                                 panelToChannelNameColSpaceWidth, ...
%                                 spaceBelowTitleRowHeight, ...
%                                 rowHeight, ...
%                                 interRowHeight, ...
%                                 outputLabelWidth, ...
%                                 spaceBetweenTerminalAndRestWidth, ...
%                                 aoScaleAndUnitsControlsWidth)
%                             
%             % Define constants     
%             nDOs = length(self.DOLabelTexts) ;            
%             %spaceBetweenTerminalAndRestWidth = 6 ;
%             isTimedColWidth = 50 ;
%             spaceBetweenTimedAndIsOnColsWidth = 0 ;
%             isOnColWidth = 30 ;
%             isTimedAndIsOnColCompositeWidth = isTimedColWidth + spaceBetweenTimedAndIsOnColsWidth + isOnColWidth ;
%             spaceToCenterIsTimedAndIsOnColCompositeWidth = (aoScaleAndUnitsControlsWidth-isTimedAndIsOnColCompositeWidth)/2;
%               % the isTimed and isOn columns, together with the fixed space
%               % between them, are treated as a unit, and are centered
%               % withing the space for them, which is the width of 
%               % aoScaleAndUnitsControlsWidth
%             rowToRowHeight=rowHeight+interRowHeight;
% 
%             % Position the DOs panel
%             panelWidth=aoPanelWidth;
%             set(self.DOsPanel,'Position',[panelBorderSize+aiPanelWidth+interPanelSpaceWidth ...
%                                           panelBorderSize ...
%                                           panelWidth ...
%                                           digitalPanelsHeight]);
%             
%             %  Layout the row of column titles in DO panel
%             titleRowBottomY=digitalPanelsHeight-panelToTitleRowSpaceHeight-titleRowHeight;
%             channelLabelColLeftX = panelToChannelNameColSpaceWidth;
%             isTimedColLeftX=channelLabelColLeftX+outputLabelWidth+spaceBetweenTerminalAndRestWidth+spaceToCenterIsTimedAndIsOnColCompositeWidth;
%             ws.alignTextInRectangleBang(self.DOIsTimedColTitleText,[isTimedColLeftX titleRowBottomY isTimedColWidth titleRowHeight],'cm');
%             isOnColLeftX=isTimedColLeftX+isTimedColWidth+spaceBetweenTimedAndIsOnColsWidth;
%             ws.alignTextInRectangleBang(self.DOIsOnColTitleText,[isOnColLeftX titleRowBottomY isOnColWidth titleRowHeight],'cm');
%             
%             % Position the stuff in the DO rows            
%             doYRowBottom=titleRowBottomY-spaceBelowTitleRowHeight-rowHeight;   
%             for i=1:nDOs ,
%                 set(self.DOLabelTexts(i), ...
%                     'Position',[channelLabelColLeftX doYRowBottom-4 outputLabelWidth rowHeight]);  % shim to make look nice
%                 ws.centerCheckboxBang(self.DOIsTimedCheckboxes(i),[isTimedColLeftX+isTimedColWidth/2 doYRowBottom+rowHeight/2]);
%                 ws.centerCheckboxBang(self.DOIsOnRadiobuttons(i),[isOnColLeftX+isOnColWidth/2 doYRowBottom+rowHeight/2]);
%                 doYRowBottom=doYRowBottom-rowToRowHeight;
%             end
%         end  % function
        
        function updateImplementation_(self)
            % This method should make sure the figure is fully synched with the
            % model state after it is called.  This includes existance,
            % placement, sizing, enablement, and properties of each control, and
            % of the figure itself.

            % This implementation should work in most cases, but can be overridden by
            % subclasses if needed.
            self.updateControlsInExistance_();
            self.updateControlPropertiesImplementation_();
            %self.updateControlEnablementImplementation_();
            %  we update the enablement in updateControlPropertiesImplementation_
            self.layout_();
            self.updateVisibility() ;
        end
        
%         function updateImplementation_(self,varargin)
%             % Syncs self with model, making no prior assumptions about what
%             % might have changed or not changed in the model.
%             self.updateControlsInExistance_();
%             self.updateControlProperties_();
%             % self.updateControlEnablementImplementation_();  % we do this
%             % in updateControlProperties_
%             self.layout_();
%         end        

        function updateControlPropertiesImplementation_(self,varargin)
            model=self.Model_;
            if isempty(model) || ~isvalid(model) ,
                return
            end
            
            % Specify colors
            normalBackgroundColor = ws.normalBackgroundColor() ;
            warningBackgroundColor = ws.warningBackgroundColor() ;
            
            % Update the device name popup
            allDeviceNames = model.AllDeviceNames ;
            ws.setPopupMenuItemsAndSelectionBang(self.DeviceNamePopup, allDeviceNames, model.PrimaryDeviceName) ;
            isWavesurferIdle=isequal(model.State,'idle');
            set(self.DeviceNamePopup, 'Enable', ws.onIff(isWavesurferIdle) ) ;
            
%             % Update the reference clock source popup
%             ws.setPopupMenuItemsAndSelectionBang(self.ReferenceClockSourcePopup, model.AvailableReferenceClockSources, model.ReferenceClockSource) ;
%             set(self.ReferenceClockSourcePopup, 'Enable', ws.onIff(isWavesurferIdle) ) ;                        
            
            % Update the panels
            self.updateReferenceClockPanelControlPropertiesImplementation_() ;        
            self.updateAIPanelControlPropertiesImplementation_(normalBackgroundColor, warningBackgroundColor) ;
            self.updateAOPanelControlPropertiesImplementation_(normalBackgroundColor, warningBackgroundColor) ;
            self.updateDIPanelControlPropertiesImplementation_(normalBackgroundColor, warningBackgroundColor) ;
            self.updateDOPanelControlPropertiesImplementation_(normalBackgroundColor, warningBackgroundColor) ;                        
        end  % function        

        function updateReferenceClockPanelControlPropertiesImplementation_(self)
            model=self.Model_;
            %isWavesurferIdle=isequal(model.State,'idle');
            
            % Update the referenceClock source popup
            [referenceClockSource, referenceClockRate] = ...
                ws.getReferenceClockSourceAndRate('', model.PrimaryDeviceName, model.IsPrimaryDeviceAPXIDevice) ;

            ws.setPopupMenuItemsAndSelectionBang(self.ReferenceClockSourcePopup, {referenceClockSource}, referenceClockSource) ;
            %set(self.ReferenceClockSourcePopup, 'Enable', 'off' ) ;                        
            
            % Update the referenceClock rate popup
            %referenceClockRate = model.ReferenceClockRate ;  % Hz
            referenceClockRateInMHz = referenceClockRate*1e-6 ;
            set(self.ReferenceClockRateEdit, 'String', sprintf('%.6g', referenceClockRateInMHz)) ;
            %set(self.ReferenceClockRateEdit, 'Enable', ws.onIff(isWavesurferIdle) ) ;                                    
        end  % function
        
        function updateAIPanelControlPropertiesImplementation_(self, normalBackgroundColor, warningBackgroundColor)            
            % update the AIs
            wsModel=self.Model_;
            isWavesurferIdle=isequal(wsModel.State,'idle');

            %deviceNames=model.Acquisition.AnalogDeviceNames;  % cell array of strings
            deviceNameForEachChannel = wsModel.AIChannelDeviceNames ;
            terminalNameForEachChannel = wsModel.AIChannelTerminalNames ;
            allDeviceNames = wsModel.AllDeviceNames ;
            %allAITerminalNames = wsModel.getAllAITerminalNames() ;
            %terminalIDs=model.Acquisition.AnalogTerminalIDs;  % zero-based NI channel index
            channelNames = wsModel.AIChannelNames ;
            channelScales = wsModel.AIChannelScales ;
            channelUnits = wsModel.AIChannelUnits ;
            nElectrodesClaimingChannel=wsModel.getNumberOfElectrodesClaimingAIChannel();
            isChannelScaleEnslaved=(nElectrodesClaimingChannel>=1);
            %isChannelOvercommitted=(nElectrodesClaimingChannel>1);
            isTerminalOvercommitted = wsModel.IsAIChannelTerminalOvercommitted ;
            nAIs=length(self.AIScaleEdits);            
            for i=1:nAIs ,
                set(self.AIChannelNameEdits(i), 'String', channelNames{i} , ...
                                                'Enable', ws.onIff(isWavesurferIdle) ) ;
                deviceName = deviceNameForEachChannel{i} ;                           
                ws.setPopupMenuItemsAndSelectionBang(self.AIDeviceNamePopups(i), ...
                                                     allDeviceNames, ...
                                                     deviceName);
                set(self.AIDeviceNamePopups(i) , ...
                    'Enable', ws.onIff(isWavesurferIdle) ) ;                                                 
                allAITerminalNames = wsModel.getAllAITerminalNames(deviceName) ;
                ws.setPopupMenuItemsAndSelectionBang(self.AITerminalNamePopups(i), ...
                                                     allAITerminalNames, ...
                                                     terminalNameForEachChannel{i}) ;
                set(self.AITerminalNamePopups(i) , ...
                    'BackgroundColor',ws.fif(isTerminalOvercommitted(i),warningBackgroundColor,normalBackgroundColor), ...
                    'Enable', ws.onIff(isWavesurferIdle) ) ;
                set(self.AIUnitsEdits(i),'String',channelUnits{i}, ...
                                         'Enable',ws.onIff(isWavesurferIdle&&~isChannelScaleEnslaved(i))) ;
                set(self.AIScaleEdits(i),'String',sprintf('%g',channelScales(i)), ...
                                         'Enable',ws.onIff(isWavesurferIdle&&~isChannelScaleEnslaved(i))) ;
                set(self.AIScaleUnitsTexts(i),'String',sprintf('V/%s',channelUnits{i})) ;
                set(self.AIIsActiveCheckboxes(i),'Value',self.Model_.IsAIChannelActive(i), ...
                                                 'Enable',ws.onIff(isWavesurferIdle)) ;                                     
                set(self.AIIsMarkedForDeletionCheckboxes(i),'Value',self.Model_.IsAIChannelMarkedForDeletion(i), ...
                                                            'Enable',ws.onIff(isWavesurferIdle)) ;                                     
            end
            
            % Deal with enablement of add/delete buttons
            nAITerminalsTotal = sum(wsModel.NAITerminalsPerDevice) ;
            areAnyFreeAITerminals = (nAIs<nAITerminalsTotal) ;
            isAIChannelMarkedForDeletion = wsModel.IsAIChannelMarkedForDeletion ;
            isAnyAIChannelMarkedForDeletion = any(isAIChannelMarkedForDeletion) ;
            set(self.AddAIChannelButton, 'Enable', ws.onIff(isWavesurferIdle && areAnyFreeAITerminals)) ;
            set(self.DeleteAIChannelsButton, 'Enable', ws.onIff(isWavesurferIdle && isAnyAIChannelMarkedForDeletion)) ;
        end  % function        
        
        function updateAOPanelControlPropertiesImplementation_(self, normalBackgroundColor, warningBackgroundColor)            
            % update the AOs
            wsModel=self.Model_;
            isWavesurferIdle=isequal(wsModel.State,'idle');

            allDeviceNames = wsModel.AllDeviceNames ;
            deviceNameForEachChannel = wsModel.AOChannelDeviceNames ;
            terminalNameForEachChannel = wsModel.AOChannelTerminalNames ;
            %allAOTerminalNames = wsModel.getAllAOTerminalNames() ;
            %terminalIDs=model.Stimulation.AnalogTerminalIDs;  % zero-based NI channel index
            channelNames=wsModel.AOChannelNames;
            channelScales=wsModel.AOChannelScales;
            channelUnits=wsModel.AOChannelUnits;
            nElectrodesClaimingChannel=wsModel.getNumberOfElectrodesClaimingAOChannel();
            isChannelScaleEnslaved=(nElectrodesClaimingChannel>=1);
            %isChannelOvercommitted=(nElectrodesClaimingChannel>1);
            isTerminalOvercommitted = wsModel.IsAOChannelTerminalOvercommitted ;
            nAOChannels=length(self.AOChannelNameEdits);            
            for i=1:nAOChannels ,
                set(self.AOChannelNameEdits(i), 'String', channelNames{i}, ...
                                                'Enable', ws.onIff(isWavesurferIdle) );
                deviceName = deviceNameForEachChannel{i} ;
                ws.setPopupMenuItemsAndSelectionBang(self.AODeviceNamePopups(i), ...
                                                     allDeviceNames, ...
                                                     deviceName);
                set(self.AODeviceNamePopups(i), ...
                    'Enable', ws.onIff(isWavesurferIdle) ) ;                                                 
                allAOTerminalNames = wsModel.getAllAOTerminalNames(deviceName) ;                                                 
                ws.setPopupMenuItemsAndSelectionBang(self.AOTerminalNamePopups(i), ...
                                                     allAOTerminalNames, ...
                                                     terminalNameForEachChannel{i});
                set(self.AOTerminalNamePopups(i) , ...
                    'BackgroundColor',ws.fif(isTerminalOvercommitted(i),warningBackgroundColor,normalBackgroundColor), ...
                    'Enable', ws.onIff(isWavesurferIdle) ) ;
                set(self.AOUnitsEdits(i),'String',channelUnits{i}, ...
                                         'Enable',ws.onIff(isWavesurferIdle&&~isChannelScaleEnslaved(i)));
                set(self.AOScaleEdits(i),'String',sprintf('%g',channelScales(i)), ...
                                         'Enable',ws.onIff(isWavesurferIdle&&~isChannelScaleEnslaved(i)));
                set(self.AOScaleUnitsTexts(i),'String',sprintf('%s/V',channelUnits{i})) ;
                %set(self.AOIsActiveCheckboxes(i),'Value',self.Model_.Stimulation.IsAnalogChannelActive(i), ...
                %                                 'Enable',ws.onIff(isWavesurferIdle));                                     
                set(self.AOIsMarkedForDeletionCheckboxes(i),'Value',self.Model_.IsAOChannelMarkedForDeletion(i), ...
                                                            'Enable',ws.onIff(isWavesurferIdle));                                     
            end
            
            % Deal with enablement of add/delete buttons
            nAOTerminals = sum(wsModel.NAOTerminalsPerDevice) ;   
            areAnyFreeAOTerminals =  (nAOChannels<nAOTerminals) ;
            isAOChannelMarkedForDeletion = wsModel.IsAOChannelMarkedForDeletion ;
            isAnyAOChannelMarkedForDeletion = any(isAOChannelMarkedForDeletion) ;
            set(self.AddAOChannelButton, 'Enable', ws.onIff(isWavesurferIdle && areAnyFreeAOTerminals)) ;
            set(self.DeleteAOChannelsButton, 'Enable', ws.onIff(isWavesurferIdle && isAnyAOChannelMarkedForDeletion)) ;
        end  % function
        
        function updateDIPanelControlPropertiesImplementation_(self, normalBackgroundColor, warningBackgroundColor)
            % update the DIs
            wsModel=self.Model_;
            isWavesurferIdle=isequal(wsModel.State,'idle');

            allDeviceNames = wsModel.AllDeviceNames ;
            deviceNameForEachChannel = wsModel.DIChannelDeviceNames ;
            terminalNameForEachChannel = wsModel.DIChannelTerminalNames ;
            %allTerminalNames = wsModel.getAllDIOTerminalNames() ;
            channelNames=wsModel.DIChannelNames;
            isTerminalOvercommitted = wsModel.IsDIChannelTerminalOvercommitted ;
            nDIChannels=length(self.DIChannelNameEdits);            
            for i=1:nDIChannels ,
                set(self.DIChannelNameEdits(i), 'String', channelNames{i}, ...
                                                'Enable', ws.onIff(isWavesurferIdle) );
                ws.setPopupMenuItemsAndSelectionBang(self.DIDeviceNamePopups(i), ...
                                                     allDeviceNames, ...
                                                     deviceNameForEachChannel{i});
                deviceName = deviceNameForEachChannel{i} ;
                allTerminalNames = wsModel.getAllDIOTerminalNames(deviceName) ;                                                 
                ws.setPopupMenuItemsAndSelectionBang(self.DITerminalNamePopups(i), ...
                                                     allTerminalNames, ...
                                                     terminalNameForEachChannel{i});
                set(self.DITerminalNamePopups(i) , ...
                    'BackgroundColor',ws.fif(isTerminalOvercommitted(i),warningBackgroundColor,normalBackgroundColor), ...
                    'Enable', ws.onIff(isWavesurferIdle) ) ;
                set(self.DIIsActiveCheckboxes(i),'Value',self.Model_.IsDIChannelActive(i), ...
                                                 'Enable',ws.onIff(isWavesurferIdle));                                     
                set(self.DIIsMarkedForDeletionCheckboxes(i),'Value',self.Model_.IsDIChannelMarkedForDeletion(i), ...
                                                            'Enable',ws.onIff(isWavesurferIdle));                                     
            end            
            
            % Deal with enablement of add/delete buttons
            isAtLeastOneFreeDIOTerminal = ~isempty(wsModel.nextFreeDIOTerminal()) ;
            %nDIOTerminals = sum(wsModel.NDIOTerminalsPerDevice) ;   
            %nDigitalChannels = wsModel.NDIChannels + wsModel.NDOChannels ;
            %areFewerDigitalChannelsThanDIOTerminals = (nDigitalChannels<nDIOTerminals) ;
            %areAnyFreeDIOTerminals =  ~isempty(model.freeDigitalTerminalIDs()) ;
            isDIChannelMarkedForDeletion = wsModel.IsDIChannelMarkedForDeletion ;
            isAnyDIChannelMarkedForDeletion = any(isDIChannelMarkedForDeletion) ;
            set(self.AddDIChannelButton, 'Enable', ws.onIff(isWavesurferIdle && isAtLeastOneFreeDIOTerminal)) ;
            set(self.DeleteDIChannelsButton, 'Enable', ws.onIff(isWavesurferIdle && isAnyDIChannelMarkedForDeletion)) ;            
        end  % function        
       
        function updateDOPanelControlPropertiesImplementation_(self, normalBackgroundColor, warningBackgroundColor)
            % update the DIs
            wsModel=self.Model_;
            isWavesurferIdle=isequal(wsModel.State,'idle');

            allDeviceNames = wsModel.AllDeviceNames ;
            deviceNameForEachChannel = wsModel.DOChannelDeviceNames ;
            terminalNameForEachChannel = wsModel.DOChannelTerminalNames ;
            %allTerminalNames = wsModel.getAllDIOTerminalNames() ;
            channelNames=wsModel.DOChannelNames;
            isTimed = wsModel.IsDOChannelTimed ;
            isTerminalOvercommitted = wsModel.IsDOChannelTerminalOvercommitted ;
            nDOs=length(self.DOChannelNameEdits);            
            for i=1:nDOs ,
                set(self.DOChannelNameEdits(i), 'String', channelNames{i}, 'Enable', ws.onIff(isWavesurferIdle) );
                ws.setPopupMenuItemsAndSelectionBang(self.DODeviceNamePopups(i), ...
                                                     allDeviceNames, ...
                                                     deviceNameForEachChannel{i});
                deviceName = deviceNameForEachChannel{i} ;
                allTerminalNames = wsModel.getAllDIOTerminalNames(deviceName) ;                                                 
                ws.setPopupMenuItemsAndSelectionBang(self.DOTerminalNamePopups(i), ...
                                                     allTerminalNames, ...
                                                     terminalNameForEachChannel{i});
                set(self.DOTerminalNamePopups(i) , ...
                    'BackgroundColor',ws.fif(isTerminalOvercommitted(i),warningBackgroundColor,normalBackgroundColor), ...
                    'Enable', ws.onIff(isWavesurferIdle) ) ;
                set(self.DOIsTimedCheckboxes(i),'value',self.Model_.IsDOChannelTimed(i),...
                                                'enable',ws.onIff(isWavesurferIdle));
                set(self.DOIsOnRadiobuttons(i),'value',self.Model_.DOChannelStateIfUntimed(i),...
                                               'enable',ws.onIff(~isTimed(i)));
                set(self.DOIsMarkedForDeletionCheckboxes(i),'Value',self.Model_.IsDOChannelMarkedForDeletion(i), ...
                                                            'Enable',ws.onIff(isWavesurferIdle));                                     
            end            
            
            % Deal with enablement of add/delete buttons
            isAtLeastOneFreeDIOTerminal = ~isempty(wsModel.nextFreeDIOTerminal()) ;
            %nDIOTerminals = sum(wsModel.NDIOTerminalsPerDevice) ;   
            %nDigitalChannels = wsModel.NDIChannels + wsModel.NDOChannels;
            %areFewerDigitalChannelsThanDIOTerminals =  (nDigitalChannels<nDIOTerminals) ;            
            %areAnyFreeDIOTerminals =  ~isempty(model.freeDigitalTerminalIDs()) ;
            isDOChannelMarkedForDeletion = wsModel.IsDOChannelMarkedForDeletion ;
            isAnyDOChannelMarkedForDeletion = any(isDOChannelMarkedForDeletion) ;
            set(self.AddDOChannelButton, 'Enable', ws.onIff(isWavesurferIdle && isAtLeastOneFreeDIOTerminal) ) ;
            set(self.DeleteDOChannelsButton, 'Enable', ws.onIff(isWavesurferIdle && isAnyDOChannelMarkedForDeletion) ) ;                        
        end  % function        
       
%         function updateDOPanelControlPropertiesImplementation_(self, normalBackgroundColor, warningBackgroundColor)  %#ok<INUSD>
%             % update the DOs
%             model=self.Model_;
%             isWavesurferIdle=isequal(model.State,'idle');
%             
%             terminalNameForEachChannel = model.Stimulation.DigitalTerminalNames ;
%             channelNames=model.DOChannelNames;
%             isTimed=model.IsDOChannelTimed;
%             nDOs = length(self.DOLabelTexts) ;
%             for i=1:nDOs ,
%                 set(self.DOLabelTexts(i),'String',sprintf('%s (%s):',channelNames{i}, terminalNameForEachChannel{i}));                
%                 set(self.DOIsTimedCheckboxes(i),'value',self.Model_.IsDOChannelTimed(i),...
%                                                 'enable',ws.onIff(isWavesurferIdle));
%                 set(self.DOIsOnRadiobuttons(i),'value',self.Model_.DOChannelStateIfUntimed(i),...
%                                                'enable',ws.onIff(~isTimed(i)));
%             end            
%         end        
        
    end  % protected methods block
    
    methods (Access = protected)
        function updateControlsInExistance_(self)
            % In subclass, this should make sure the non-fixed controls in
            % existance are synced with the model state, deleting
            % inappropriate ones and creating appropriate ones as needed.            
            
            self.updateAIPanelControlsInExistance_() ;
            self.updateAOPanelControlsInExistance_() ;
            self.updateDIPanelControlsInExistance_() ;
            self.updateDOPanelControlsInExistance_() ;
        end  % function
        
        function updateAIPanelControlsInExistance_(self)
            wsModel = self.Model_ ;
            if isempty(wsModel) ,
                nAIs = 0 ;
            else
                nAIs = wsModel.NAIChannels ;
            end
            
            % Redimension AI arrays as needed
            nAIsBefore = length(self.AIChannelNameEdits) ;
            if nAIsBefore<nAIs ,
                % need to make more slots, fill them
                
                % redimension arrays
                self.AIChannelNameEdits(nAIs) = 0 ;
                self.AIDeviceNamePopups(nAIs) = 0 ;
                self.AITerminalNamePopups(nAIs) = 0 ;
                self.AIScaleEdits(nAIs)= 0 ;
                self.AIScaleUnitsTexts(nAIs)= 0 ;
                self.AIUnitsEdits(nAIs)= 0 ;
                self.AIIsActiveCheckboxes(nAIs)= 0 ;                
                self.AIIsMarkedForDeletionCheckboxes(nAIs)= 0 ;                
                
                % Populate the AI channel rows      
                for i=(nAIsBefore+1):nAIs ,
                    self.AIChannelNameEdits(i) = ...
                        ws.uiedit('Parent',self.AIsPanel, ...
                                  'Tag',sprintf('AIChannelNameEdits%d',i), ...
                                  'HorizontalAlignment','left', ...
                                  'Callback',@(source,event)(self.controlActuated('AIChannelNameEdits',source,event)) );
                    self.AIDeviceNamePopups(i) = ...
                        ws.uicontrol('Parent',self.AIsPanel, ...
                                     'Style','popup', ...
                                     'Tag',sprintf('AIDeviceNamePopups%d',i), ...
                                     'BackgroundColor','w', ...
                                     'HorizontalAlignment','right', ...
                                     'String', {'(Stuff)'}, ...
                                     'Callback',@(source,event)(self.controlActuated('AIDeviceNamePopups',source,event)) );
                    self.AITerminalNamePopups(i) = ...
                        ws.uicontrol('Parent',self.AIsPanel, ...
                                     'Style','popup', ...
                                     'Tag',sprintf('AITerminalNamePopups%d',i), ...
                                     'BackgroundColor','w', ...
                                     'HorizontalAlignment','right', ...
                                     'Callback',@(source,event)(self.controlActuated('AITerminalNamePopups',source,event)) );
                    self.AIScaleEdits(i)= ...
                        ws.uiedit('Parent',self.AIsPanel, ...
                                  'Tag',sprintf('AIScaleEdits%d',i), ...
                                  'HorizontalAlignment','right', ...
                                  'Callback',@(source,event)(self.controlActuated('AIScaleEdits',source,event)) );
                    self.AIScaleUnitsTexts(i)= ...
                        ws.uicontrol('Parent',self.AIsPanel, ...
                                  'Style','text', ...
                                  'Tag',sprintf('AIScaleUnitsTexts%d',i), ...
                                  'String','V/V', ...
                                  'HorizontalAlignment','left');
                    self.AIUnitsEdits(i)= ...
                        ws.uiedit('Parent',self.AIsPanel, ...
                                  'Tag',sprintf('AIUnitsEdits%d',i), ...
                                  'HorizontalAlignment','left', ...
                                  'Callback',@(source,event)(self.controlActuated('AIUnitsEdits',source,event)) );
                    self.AIIsActiveCheckboxes(i)= ...
                        ws.uicontrol('Parent',self.AIsPanel, ...
                                  'Style','checkbox', ...
                                  'Value',0, ...
                                  'String','', ...
                                  'Callback',@(source,event)(self.controlActuated('AIIsActiveCheckboxes',source,event)));                          
                    self.AIIsMarkedForDeletionCheckboxes(i)= ...
                        ws.uicontrol('Parent',self.AIsPanel, ...
                                  'Style','checkbox', ...
                                  'Value',0, ...
                                  'String','', ...
                                  'Callback',@(source,event)(self.controlActuated('AIIsMarkedForDeletionCheckboxes',source,event)));
                end                
            elseif nAIsBefore>nAIs 
                % delete the objects
                delete(self.AIChannelNameEdits(nAIs+1:end)) ;
                delete(self.AIDeviceNamePopups(nAIs+1:end)) ;                
                delete(self.AITerminalNamePopups(nAIs+1:end)) ;                
                delete(self.AIScaleEdits(nAIs+1:end)) ;
                delete(self.AIScaleUnitsTexts(nAIs+1:end)) ;
                delete(self.AIUnitsEdits(nAIs+1:end)) ;
                delete(self.AIIsActiveCheckboxes(nAIs+1:end)) ;                
                delete(self.AIIsMarkedForDeletionCheckboxes(nAIs+1:end)) ;                
                
                % need to trim the arrays
                self.AIChannelNameEdits(nAIs+1:end) = [] ;
                self.AIDeviceNamePopups(nAIs+1:end) = [] ;
                self.AITerminalNamePopups(nAIs+1:end) = [] ;
                self.AIScaleEdits(nAIs+1:end) = [] ;
                self.AIScaleUnitsTexts(nAIs+1:end) = [] ;
                self.AIUnitsEdits(nAIs+1:end) = [] ;
                self.AIIsActiveCheckboxes(nAIs+1:end) = [] ;                
                self.AIIsMarkedForDeletionCheckboxes(nAIs+1:end) = [] ;                
            end
        end  % function
        
        function updateAOPanelControlsInExistance_(self)
            wsModel = self.Model_ ;
            if isempty(wsModel) ,
                nAOs = 0 ;
            else
                nAOs = wsModel.NAOChannels ;
            end
            
            % Redimension AO arrays as needed
            nAOsBefore = length(self.AOChannelNameEdits) ;
            if nAOsBefore<nAOs ,
                % need to make more slots, fill them
                
                % redimension arrays
                self.AOChannelNameEdits(nAOs) = 0 ;
                self.AOTerminalNamePopups(nAOs) = 0 ;
                self.AOScaleEdits(nAOs)= 0 ;
                self.AOScaleUnitsTexts(nAOs)= 0 ;
                self.AOUnitsEdits(nAOs)= 0 ;
                %self.AOIsActiveCheckboxes(nAOs)= 0 ;                
                self.AOIsMarkedForDeletionCheckboxes(nAOs)= 0 ;                
                
                % Populate the AO channel rows      
                for i=(nAOsBefore+1):nAOs ,
                    self.AOChannelNameEdits(i)= ...
                        ws.uiedit('Parent',self.AOsPanel, ...
                                  'Tag',sprintf('AOChannelNameEdits%d',i), ...
                                  'HorizontalAlignment','left', ...
                                  'Callback',@(source,event)(self.controlActuated('AOChannelNameEdits',source,event)) );
                    self.AODeviceNamePopups(i) = ...
                        ws.uicontrol('Parent',self.AOsPanel, ...
                                     'Style','popup', ...
                                     'Tag',sprintf('AODeviceNamePopups%d',i), ...
                                     'BackgroundColor','w', ...
                                     'HorizontalAlignment','right', ...
                                     'String', {'(Stuff)'}, ...
                                     'Callback',@(source,event)(self.controlActuated('AODeviceNamePopups',source,event)) );
                    self.AOTerminalNamePopups(i)= ...
                        ws.uicontrol('Parent',self.AOsPanel, ...
                                  'Style','popup', ...
                                  'Tag',sprintf('AOTerminalNamePopups%d',i), ...
                                  'BackgroundColor','w', ...
                                  'HorizontalAlignment','right', ...
                                  'Callback',@(source,event)(self.controlActuated('AOTerminalNamePopups',source,event)) );
                    self.AOScaleEdits(i)= ...
                        ws.uiedit('Parent',self.AOsPanel, ...
                                  'Tag',sprintf('AOScaleEdits%d',i), ...
                                  'HorizontalAlignment','right', ...
                                  'Callback',@(source,event)(self.controlActuated('AOScaleEdits',source,event)) );
                    self.AOScaleUnitsTexts(i)= ...
                        ws.uicontrol('Parent',self.AOsPanel, ...
                                  'Style','text', ...
                                  'Tag',sprintf('AOScaleUnitsTexts%d',i), ...
                                  'String','V/V', ...
                                  'HorizontalAlignment','left');
                    self.AOUnitsEdits(i)= ...
                        ws.uiedit('Parent',self.AOsPanel, ...
                                  'Tag',sprintf('AOUnitsEdits%d',i), ...
                                  'HorizontalAlignment','left', ...
                                  'Callback',@(source,event)(self.controlActuated('AOUnitsEdits',source,event)) );
%                     self.AOIsActiveCheckboxes(i)= ...
%                         ws.uicontrol('Parent',self.AOsPanel, ...
%                                   'Style','checkbox', ...
%                                   'Value',0, ...
%                                   'String','', ...
%                                   'Callback',@(source,event)(self.controlActuated('AOIsActiveCheckboxes',source,event)));                          
                    self.AOIsMarkedForDeletionCheckboxes(i)= ...
                        ws.uicontrol('Parent',self.AOsPanel, ...
                                  'Style','checkbox', ...
                                  'Value',0, ...
                                  'String','', ...
                                  'Callback',@(source,event)(self.controlActuated('AOIsMarkedForDeletionCheckboxes',source,event)));
                end                
            elseif nAOsBefore>nAOs 
                % delete the objects
                delete(self.AOChannelNameEdits(nAOs+1:end)) ;
                delete(self.AODeviceNamePopups(nAOs+1:end)) ;                
                delete(self.AOTerminalNamePopups(nAOs+1:end)) ;                
                delete(self.AOScaleEdits(nAOs+1:end)) ;
                delete(self.AOScaleUnitsTexts(nAOs+1:end)) ;
                delete(self.AOUnitsEdits(nAOs+1:end)) ;
                %delete(self.AOIsActiveCheckboxes(nAOs+1:end)) ;                
                delete(self.AOIsMarkedForDeletionCheckboxes(nAOs+1:end)) ;                
                
                % need to trim the arrays
                self.AOChannelNameEdits(nAOs+1:end) = [] ;
                self.AODeviceNamePopups(nAOs+1:end) = [] ;
                self.AOTerminalNamePopups(nAOs+1:end) = [] ;
                self.AOScaleEdits(nAOs+1:end) = [] ;
                self.AOScaleUnitsTexts(nAOs+1:end) = [] ;
                self.AOUnitsEdits(nAOs+1:end) = [] ;
                %self.AOIsActiveCheckboxes(nAOs+1:end) = [] ;                
                self.AOIsMarkedForDeletionCheckboxes(nAOs+1:end) = [] ;                
            end
        end  % function
        
        function updateDIPanelControlsInExistance_(self)
            model = self.Model_ ;
            if isempty(model) ,
                nDIs = 0 ;
            else
                nDIs = model.NDIChannels ;
            end
            
            % Redimension DI arrays as needed
            nDIsBefore = length(self.DIChannelNameEdits) ;
            if nDIsBefore<nDIs ,
                % need to make more slots, fill them
                
                % redimension arrays
                self.DIChannelNameEdits(nDIs) = 0 ;
                self.DITerminalNamePopups(nDIs) = 0 ;
                self.DIIsActiveCheckboxes(nDIs)= 0 ;                
                self.DIIsMarkedForDeletionCheckboxes(nDIs)= 0 ;                
                
                % Populate the DI channel rows      
                for i=(nDIsBefore+1):nDIs ,
                    self.DIChannelNameEdits(i)= ...
                        ws.uiedit('Parent',self.DIsPanel, ...
                                  'Tag',sprintf('DIChannelNameEdits%d',i), ...
                                  'HorizontalAlignment','left', ...
                                  'Callback',@(source,event)(self.controlActuated('DIChannelNameEdits',source,event)) );
                    self.DIDeviceNamePopups(i) = ...
                        ws.uicontrol('Parent',self.DIsPanel, ...
                                     'Style','popup', ...
                                     'Tag',sprintf('DIDeviceNamePopups%d',i), ...
                                     'BackgroundColor','w', ...
                                     'HorizontalAlignment','right', ...
                                     'String', {'(Stuff)'}, ...
                                     'Enable', 'off', ...
                                     'Callback',@(source,event)(self.controlActuated('DIDeviceNamePopups',source,event)) );
                    self.DITerminalNamePopups(i)= ...
                        ws.uicontrol('Parent',self.DIsPanel, ...
                                  'Style','popup', ...
                                  'Tag',sprintf('DITerminalNamePopups%d',i), ...
                                  'BackgroundColor','w', ...
                                  'HorizontalAlignment','right', ...
                                  'Callback',@(source,event)(self.controlActuated('DITerminalNamePopups',source,event)) );
                    self.DIIsActiveCheckboxes(i)= ...
                        ws.uicontrol('Parent',self.DIsPanel, ...
                                  'Style','checkbox', ...
                                  'Value',0, ...
                                  'String','', ...
                                  'Callback',@(source,event)(self.controlActuated('DIIsActiveCheckboxes',source,event)));                          
                    self.DIIsMarkedForDeletionCheckboxes(i)= ...
                        ws.uicontrol('Parent',self.DIsPanel, ...
                                  'Style','checkbox', ...
                                  'Value',0, ...
                                  'String','', ...
                                  'Callback',@(source,event)(self.controlActuated('DIIsMarkedForDeletionCheckboxes',source,event)));
                end                
            elseif nDIsBefore>nDIs 
                % delete the objects
                delete(self.DIChannelNameEdits(nDIs+1:end)) ;
                delete(self.DIDeviceNamePopups(nDIs+1:end)) ;                
                delete(self.DITerminalNamePopups(nDIs+1:end)) ;                
                delete(self.DIIsActiveCheckboxes(nDIs+1:end)) ;                
                delete(self.DIIsMarkedForDeletionCheckboxes(nDIs+1:end)) ;                
                
                % need to trim the arrays
                self.DIChannelNameEdits(nDIs+1:end) = [] ;
                self.DIDeviceNamePopups(nDIs+1:end) = [] ;
                self.DITerminalNamePopups(nDIs+1:end) = [] ;
                self.DIIsActiveCheckboxes(nDIs+1:end) = [] ;                
                self.DIIsMarkedForDeletionCheckboxes(nDIs+1:end) = [] ;                
            end
        end  % function
        
        function updateDOPanelControlsInExistance_(self)
            model = self.Model_ ;
            if isempty(model) ,
                nDOs = 0 ;
            else
                nDOs = model.NDOChannels ;
            end
            
            % Redimension DO arrays as needed
            nDOsBefore = length(self.DOChannelNameEdits) ;
            if nDOsBefore<nDOs ,
                % need to make more slots, fill them
                
                % redimension arrays
                self.DOChannelNameEdits(nDOs) = 0 ;
                self.DOTerminalNamePopups(nDOs) = 0 ;
                self.DOIsTimedCheckboxes(nDOs)= 0 ;                
                self.DOIsOnRadiobuttons(nDOs)= 0 ;                
                self.DOIsMarkedForDeletionCheckboxes(nDOs)= 0 ;                
                
                % Populate the DO channel rows      
                for i=(nDOsBefore+1):nDOs ,
                    self.DOChannelNameEdits(i)= ...
                        ws.uiedit('Parent',self.DOsPanel, ...
                                  'Tag',sprintf('DOChannelNameEdits%d',i), ...
                                  'HorizontalAlignment','left', ...
                                  'Callback',@(source,event)(self.controlActuated('DOChannelNameEdits',source,event)) );
                    self.DODeviceNamePopups(i) = ...
                        ws.uicontrol('Parent',self.DOsPanel, ...
                                     'Style','popup', ...
                                     'Tag',sprintf('DODeviceNamePopups%d',i), ...
                                     'BackgroundColor','w', ...
                                     'HorizontalAlignment','right', ...
                                     'String', {'(Stuff)'}, ...
                                     'Enable', 'off', ...
                                     'Callback',@(source,event)(self.controlActuated('DODeviceNamePopups',source,event)) );
                    self.DOTerminalNamePopups(i)= ...
                        ws.uicontrol('Parent',self.DOsPanel, ...
                                  'Style','popup', ...
                                  'Tag',sprintf('DOTerminalNamePopups%d',i), ...
                                  'BackgroundColor','w', ...
                                  'HorizontalAlignment','right', ...
                                  'Callback',@(source,event)(self.controlActuated('DOTerminalNamePopups',source,event)) );
                    self.DOIsTimedCheckboxes(i)= ...
                        ws.uicontrol('Parent',self.DOsPanel, ...
                                  'Style','checkbox', ...
                                  'Value',0, ...
                                  'String','', ...
                                  'Callback',@(source,event)(self.controlActuated('DOIsTimedCheckboxes',source,event)));
                    self.DOIsOnRadiobuttons(i)= ...
                        ws.uicontrol('Parent',self.DOsPanel, ...
                                  'Style','radiobutton', ...
                                  'Value',0, ...
                                  'String','', ...
                                  'Callback',@(source,event)(self.controlActuated('DOIsOnRadiobuttons',source,event)));
                    self.DOIsMarkedForDeletionCheckboxes(i)= ...
                        ws.uicontrol('Parent',self.DOsPanel, ...
                                  'Style','checkbox', ...
                                  'Value',0, ...
                                  'String','', ...
                                  'Callback',@(source,event)(self.controlActuated('DOIsMarkedForDeletionCheckboxes',source,event)));
                end                
            elseif nDOsBefore>nDOs 
                % delete the objects
                delete(self.DOChannelNameEdits(nDOs+1:end)) ;
                delete(self.DODeviceNamePopups(nDOs+1:end)) ;                
                delete(self.DOTerminalNamePopups(nDOs+1:end)) ;                
                delete(self.DOIsTimedCheckboxes(nDOs+1:end)) ;
                delete(self.DOIsOnRadiobuttons(nDOs+1:end)) ;                
                delete(self.DOIsMarkedForDeletionCheckboxes(nDOs+1:end)) ;                
                
                % need to trim the arrays
                self.DOChannelNameEdits(nDOs+1:end) = [] ;
                self.DODeviceNamePopups(nDOs+1:end) = [] ;
                self.DOTerminalNamePopups(nDOs+1:end) = [] ;
                self.DOIsTimedCheckboxes(nDOs+1:end) = [] ;                
                self.DOIsOnRadiobuttons(nDOs+1:end) = [] ;                                
                self.DOIsMarkedForDeletionCheckboxes(nDOs+1:end) = [] ;                
            end
        end  % function
                
        function closeRequested_(self, source, event)  %#ok<INUSD>
            wsModel = self.Model_ ;
            
            if isempty(wsModel) || ~isvalid(wsModel) ,
                shouldStayPut = false ;
            else
                shouldStayPut = ~wsModel.isIdleSensuLato() ;
            end
           
            if shouldStayPut ,
                % Do nothing
            else
                %self.hide() ;
                wsModel.IsChannelsFigureVisible = false ;
            end
        end
        
    end  % protected methods block    
    
    methods
        function DeviceNamePopupActuated(self, source, event)  %#ok<INUSD>
            allDeviceNames = self.Model_.AllDeviceNames ;
            deviceName = ws.getPopupMenuSelection(source, allDeviceNames) ;
            self.Model_.do('set', 'PrimaryDeviceName', deviceName) ;
        end
        
%         function ReferenceClockSourcePopupActuated(self, source, event)  %#ok<INUSD>
%             availableTimebaseSources = self.Model_.AvailableReferenceClockSources ;
%             timebaseSource = ws.getPopupMenuSelection(source, availableTimebaseSources) ;
%             self.Model_.do('set', 'ReferenceClockSource', timebaseSource) ;
%         end
        
        function AIChannelNameEditsActuated(self,source,event) %#ok<INUSD>
            isTheChannel = (source==self.AIChannelNameEdits) ;
            i = find(isTheChannel) ;
            newString = get(self.AIChannelNameEdits(i),'String') ;
            %self.Model_.Acquisition.setSingleAnalogChannelName(i, newString) ;
            self.Model_.do('setSingleAIChannelName', i, newString) ;
        end
        
        function AIDeviceNamePopupsActuated(self, source, event)  %#ok<INUSD>
            wavesurferModel = self.Model_ ;
            validChoices = wavesurferModel.AllDeviceNames ;
            choice = ws.getPopupMenuSelection(source, validChoices) ;
            isTheChannel = (source==self.AIDeviceNamePopups) ;
            iChannel = find(isTheChannel) ;
            self.Model_.do('setSingleAIChannelDeviceName', iChannel, choice) ;  %#ok<FNDSB>
        end
        
        function AITerminalNamePopupsActuated(self,source,event) %#ok<INUSD>
            % Get the list of valid choices, if we can
            %wavesurferModel = self.Model_ ;
            %validChoices = wavesurferModel.getAllAITerminalNames() ;
            % Do the rest
            choice = ws.getPopupMenuSelection(source) ;
            %terminalIDAsString = choice(3:end) ;
            %terminalID = str2double(terminalIDAsString) ;            
            isTheChannel = (source==self.AITerminalNamePopups) ;
            iChannel = find(isTheChannel) ;
            self.Model_.do('setSingleAIChannelTerminalName', iChannel, choice) ;  %#ok<FNDSB>
        end
        
        function AIScaleEditsActuated(self,source,event)  %#ok<INUSD>
            isTheChannel=(source==self.AIScaleEdits);
            i=find(isTheChannel);
            newString=get(self.AIScaleEdits(i),'String');
            newValue=str2double(newString);
            %self.Model_.Acquisition.setSingleAnalogChannelScale(i,newValue);
            self.Model_.do('setSingleAIChannelScale', i, newValue) ;
        end
        
        function AIUnitsEditsActuated(self,source,event) %#ok<INUSD>
            isTheChannel=(source==self.AIUnitsEdits);
            i=find(isTheChannel);
            newString=get(self.AIUnitsEdits(i),'String');
            %self.Model_.Acquisition.setSingleAnalogChannelUnits(i,newString);
            self.Model_.do('setSingleAIChannelUnits', i, newString) ;
        end
        
        function AIIsActiveCheckboxesActuated(self, source, event) %#ok<INUSD>
            aiChannelIndex = find(source==self.AIIsActiveCheckboxes) ;
            %originalIsAIChannelActive = self.Model_.IsAIChannelActive ;
            %newIsAIChannelActive = ws.replace(originalIsAIChannelActive, aiChannelIndex, get(source,'Value')) ;  %#ok<FNDSB>
            newValue = get(source,'Value') ;
            self.Model_.do('setSingleIsAIChannelActive', aiChannelIndex, newValue) ;  %#ok<FNDSB>
        end

        function AIIsMarkedForDeletionCheckboxesActuated(self,source,event)  %#ok<INUSD>
            indexOfTheChannel = find(source==self.AIIsMarkedForDeletionCheckboxes) ;
            isAnalogChannelMarkedForDeletion = self.Model_.IsAIChannelMarkedForDeletion ;
            isAnalogChannelMarkedForDeletion(indexOfTheChannel) = get(source,'Value') ;  %#ok<FNDSB>
            %self.Model_.Acquisition.IsAnalogChannelMarkedForDeletion = isAnalogChannelMarkedForDeletion ;             
            self.Model_.do('set', 'IsAIChannelMarkedForDeletion', isAnalogChannelMarkedForDeletion) ;
        end

        function AddAIChannelButtonActuated(self,source,event)  %#ok<INUSD>
            %self.Model_.Acquisition.addAnalogChannel() ;
            self.Model_.do('addAIChannel') ;
        end
        
        function DeleteAIChannelsButtonActuated(self,source,event)  %#ok<INUSD>
            %self.Model_.Acquisition.deleteMarkedAnalogChannels() ;
            self.Model_.do('deleteMarkedAIChannels') ;
        end
        
        function AOChannelNameEditsActuated(self,source,event) %#ok<INUSD>
            isTheChannel = (source==self.AOChannelNameEdits) ;
            i = find(isTheChannel) ;
            newString = get(self.AOChannelNameEdits(i),'String') ;
            %self.Model_.Stimulation.setSingleAnalogChannelName(i, newString) ;
            self.Model_.do('setSingleAOChannelName', i, newString) ;
        end
        
        function AODeviceNamePopupsActuated(self, source, event)  %#ok<INUSD>
            wavesurferModel = self.Model_ ;
            validChoices = wavesurferModel.AllDeviceNames ;
            choice = ws.getPopupMenuSelection(source, validChoices) ;
            isTheChannel = (source==self.AODeviceNamePopups) ;
            iChannel = find(isTheChannel) ;
            self.Model_.do('setSingleAOChannelDeviceName', iChannel, choice) ;  %#ok<FNDSB>
        end
        
        function AOTerminalNamePopupsActuated(self, source, event)  %#ok<INUSD>
            % Get the list of valid choices, if we can
            %wavesurferModel = self.Model_ ;
            %validChoices = wavesurferModel.getAllAOTerminalNames() ;
            % Do the rest
            choice = ws.getPopupMenuSelection(source) ;
            %terminalIDAsString = choice(3:end) ;
            %terminalID = str2double(terminalIDAsString) ;            
            isTheChannel = (source==self.AOTerminalNamePopups) ;
            iChannel = find(isTheChannel) ;
            %self.Model_.Stimulation.setSingleAnalogTerminalID(iChannel, terminalID) ;  %#ok<FNDSB>
            self.Model_.do('setSingleAOChannelTerminalName', iChannel, choice) ;  %#ok<FNDSB>
        end
        
        function AOScaleEditsActuated(self,source,event)  %#ok<INUSD>
            isTheChannel=(source==self.AOScaleEdits);
            i=find(isTheChannel);
            newString=get(self.AOScaleEdits(i),'String');
            newValue=str2double(newString);
            %self.Model_.Stimulation.setSingleAnalogChannelScale(i,newValue);
            self.Model_.do('setSingleAOChannelScale', i, newValue);            
        end
        
        function AOUnitsEditsActuated(self,source,event)  %#ok<INUSD>
            isTheChannel=(source==self.AOUnitsEdits);
            i=find(isTheChannel);            
            newString=get(self.AOUnitsEdits(i),'String');
            newValue=strtrim(newString);
            %self.Model_.Stimulation.setSingleAnalogChannelUnits(i,newValue);
            self.Model_.do('setSingleAOChannelUnits', i, newValue) ;
        end
        
        function AOIsMarkedForDeletionCheckboxesActuated(self,source,event)  %#ok<INUSD>
            indexOfTheChannel = find(source==self.AOIsMarkedForDeletionCheckboxes) ;
            isAnalogChannelMarkedForDeletion = self.Model_.IsAOChannelMarkedForDeletion ;
            isAnalogChannelMarkedForDeletion(indexOfTheChannel) = get(source,'Value') ;  %#ok<FNDSB>
            %self.Model_.IsAOChannelMarkedForDeletion = isAnalogChannelMarkedForDeletion ;             
            self.Model_.do('set', 'IsAOChannelMarkedForDeletion', isAnalogChannelMarkedForDeletion) ;
        end

        function AddAOChannelButtonActuated(self,source,event)  %#ok<INUSD>
            %self.Model_.Stimulation.addAnalogChannel() ;
            self.Model_.do('addAOChannel') ;            
        end
        
        function DeleteAOChannelsButtonActuated(self,source,event)  %#ok<INUSD>
            %self.Model_.deleteMarkedAOChannels() ;
            self.Model_.do('deleteMarkedAOChannels') ;
        end
        
        function DIChannelNameEditsActuated(self,source,event) %#ok<INUSD>
            isTheChannel = (source==self.DIChannelNameEdits) ;
            i = find(isTheChannel) ;
            newString = get(self.DIChannelNameEdits(i),'String') ;
            %self.Model_.Acquisition.setSingleDigitalChannelName(i, newString) ;
            self.Model_.do('setSingleDIChannelName', i, newString) ;
        end
        
        function DIDeviceNamePopupsActuated(self, source, event)  %#ok<INUSD>
%             wavesurferModel = self.Model_ ;
%             validChoices = wavesurferModel.AllDeviceNames ;
%             choice = ws.getPopupMenuSelection(source, validChoices) ;
%             isTheChannel = (source==self.DIDeviceNamePopups) ;
%             iChannel = find(isTheChannel) ;
%             self.Model_.do('setSingleDIChannelDeviceName', iChannel, choice) ;  %#ok<FNDSB>
            self.update() ;
        end        
        
        function DITerminalNamePopupsActuated(self, source, event)  %#ok<INUSD>
            % Get the list of valid choices, if we can
            %wavesurferModel = self.Model_ ;
            %validChoices = wavesurferModel.getAllDIOTerminalNames() ;
            % Do the rest
            terminalName = ws.getPopupMenuSelection(source) ;
            %terminalIDAsString = terminalName(4:end) ;
            %terminalID = str2double(terminalIDAsString) ;
            isTheChannel = (source==self.DITerminalNamePopups) ;
            iChannel = find(isTheChannel) ;
            %self.Model_.setSingleDIChannelTerminalID(iChannel, terminalID) ;  %#ok<FNDSB>
            self.Model_.do('setSingleDIChannelTerminalName', iChannel, terminalName) ;  %#ok<FNDSB>
        end
        
        function DIIsActiveCheckboxesActuated(self,source,event)  %#ok<INUSD>
            diChannelIndex = find(source==self.DIIsActiveCheckboxes) ;
            newValue = get(source,'Value') ;
            self.Model_.do('setSingleIsDIChannelActive', diChannelIndex, newValue);  %#ok<FNDSB>
        end

        function DIIsMarkedForDeletionCheckboxesActuated(self,source,event)  %#ok<INUSD>
            indexOfTheChannel = find(source==self.DIIsMarkedForDeletionCheckboxes) ;
            isChannelMarkedForDeletion = self.Model_.IsDIChannelMarkedForDeletion ;
            isChannelMarkedForDeletion(indexOfTheChannel) = get(source,'Value') ;  %#ok<FNDSB>
            self.Model_.do('set', 'IsDIChannelMarkedForDeletion', isChannelMarkedForDeletion) ;
        end

        function AddDIChannelButtonActuated(self,source,event)  %#ok<INUSD>
            %self.Model_.addDIChannel() ;
            self.Model_.do('addDIChannel') ;
        end
        
        function DeleteDIChannelsButtonActuated(self,source,event)  %#ok<INUSD>
            %self.Model_.deleteMarkedDIChannels() ;
            self.Model_.do('deleteMarkedDIChannels') ;
        end
        
        function DOChannelNameEditsActuated(self,source,event) %#ok<INUSD>
            isTheChannel = (source==self.DOChannelNameEdits) ;
            i = find(isTheChannel) ;
            newString = get(self.DOChannelNameEdits(i),'String') ;
            %self.Model_.Stimulation.setSingleDigitalChannelName(i, newString) ;
            self.Model_.do('setSingleDOChannelName', i, newString) ;
        end
        
        function DODeviceNamePopupsActuated(self, source, event)  %#ok<INUSD>
%             wavesurferModel = self.Model_ ;
%             validChoices = wavesurferModel.AllDeviceNames ;
%             choice = ws.getPopupMenuSelection(source, validChoices) ;
%             isTheChannel = (source==self.DODeviceNamePopups) ;
%             iChannel = find(isTheChannel) ;
%             self.Model_.do('setSingleDOChannelDeviceName', iChannel, choice) ;  %#ok<FNDSB>
            self.update() ;
        end        
        
        function DOTerminalNamePopupsActuated(self,source,event) %#ok<INUSD>
            % Get the list of valid choices, if we can
            %wavesurferModel = self.Model_ ;
            %validChoices = wavesurferModel.getAllDIOTerminalNames() ;
            % Do the rest
            terminalName = ws.getPopupMenuSelection(source) ;
            %terminalIDAsString = terminalName(4:end) ;
            %terminalID = str2double(terminalIDAsString) ;            
            isTheChannel = (source==self.DOTerminalNamePopups) ;
            iChannel = find(isTheChannel) ;
            %self.Model_.setSingleDOChannelTerminalID(iChannel, terminalID) ;  %#ok<FNDSB>
            self.Model_.do('setSingleDOChannelTerminalName', iChannel, terminalName) ;  %#ok<FNDSB>
        end
        
        function DOIsTimedCheckboxesActuated(self, source, event)  %#ok<INUSD>
            isTheChannel = (source==self.DOIsTimedCheckboxes) ;
            i = find(isTheChannel) ;            
            newState = get(self.DOIsTimedCheckboxes(i),'value') ;
            %self.Model_.IsDOChannelTimed(i)=newState;
            newArray = ws.replace(self.Model_.IsDOChannelTimed, i, newState) ;
            self.Model_.do('set','IsDOChannelTimed', newArray) ;
            %self.update();  % Surely this is not necessary anymore,
                                    % right?  -- ALT, 2016-09-12
        end
        
        function DOIsOnRadiobuttonsActuated(self,source,event)  %#ok<INUSD>
            isTheChannel = (source==self.DOIsOnRadiobuttons) ;
            i = find(isTheChannel) ;
            newState = get(self.DOIsOnRadiobuttons(i),'value') ;
            value = self.Model_.DOChannelStateIfUntimed ;
            newValue = ws.replace(value, i, newState) ;
            % self.Model_.DOChannelStateIfUntimed = newValue ;
            self.Model_.do('set', 'DOChannelStateIfUntimed', newValue) ;            
        end
        
        function DOIsMarkedForDeletionCheckboxesActuated(self, source, event)  %#ok<INUSD>
            indexOfTheChannel = find(source==self.DOIsMarkedForDeletionCheckboxes) ;
            %isChannelMarkedForDeletion = self.Model_.IsDOChannelMarkedForDeletion ;
            %isChannelMarkedForDeletion(indexOfTheChannel) = get(source,'Value') ;  %#ok<FNDSB>
            originalArray = self.Model_.IsDOChannelMarkedForDeletion ;
            newValue = get(source,'Value') ;
            newArray = ws.replace(originalArray, indexOfTheChannel, newValue) ;  %#ok<FNDSB>
            %self.Model_.IsDOChannelMarkedForDeletion = isChannelMarkedForDeletion ;             
            self.Model_.do('set', 'IsDOChannelMarkedForDeletion', newArray) ;             
        end

        function AddDOChannelButtonActuated(self,source,event)  %#ok<INUSD>
            %self.Model_.addDOChannel() ;
            self.Model_.do('addDOChannel') ;
        end
        
        function DeleteDOChannelsButtonActuated(self,source,event)  %#ok<INUSD>
            %self.Model_.deleteMarkedDOChannels() ;
            self.Model_.do('deleteMarkedDOChannels') ;
        end       
    end  % public methods block

%     methods 
%         function updateVisibility(self, ~, ~, ~, ~, event)
%             figureName = event.Args{1} ;
%             oldValue = event.Args{2} ;            
%             if isequal(figureName, 'Channels') ,
%                 newValue = self.Model_.IsChannelsFigureVisible ;
%                 if oldValue && newValue , 
%                     % Do this to raise the figure
%                     set(self.FigureGH_, 'Visible', 'off') ;
%                     set(self.FigureGH_, 'Visible', 'on') ;
%                 else
%                     set(self.FigureGH_, 'Visible', ws.onIff(newValue)) ;
%                 end                    
%             end
%         end                
%     end

end  % classdef
